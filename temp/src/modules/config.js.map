{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../src/modules/config.ts"],"names":[],"mappings":"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","sourcesContent":["namespace Config {\n  // Version info - injected during build\n  export const VERSION = Constants.METADATA.VERSION_PLACEHOLDER;\n  export const DEPLOY_TIME = Constants.METADATA.DEPLOY_TIME_PLACEHOLDER;\n  \n  // App metadata\n  export const APP_NAME = Constants.METADATA.APP_NAME;\n  export const APP_DESCRIPTION = Constants.METADATA.APP_DESCRIPTION;\n  \n  // API configuration\n  export const GEMINI_API_URL = `${Constants.API.GEMINI_BASE_URL}/${Constants.API.GEMINI_VERSION}/models/${Constants.API.GEMINI_MODEL}:${Constants.API.GEMINI_ENDPOINT}`;\n  export const API_TEMPERATURE = Constants.API.TEMPERATURE;\n  export const API_MAX_TOKENS = Constants.API.MAX_OUTPUT_TOKENS;\n  export const API_TIMEOUT = Constants.API.TIMEOUT_MS;\n  \n  // Processing limits\n  export const MAX_THREADS_TO_PROCESS = Constants.EMAIL.MAX_THREADS_TO_PROCESS;\n  export const MAX_SENT_EMAILS_TO_ANALYZE = Constants.EMAIL.MAX_SENT_EMAILS_TO_ANALYZE;\n  export const MAX_CONTEXT_MESSAGES = Constants.EMAIL.MAX_CONTEXT_MESSAGES;\n  export const MAX_RESPONSE_LENGTH = Constants.EMAIL.MAX_RESPONSE_LENGTH;\n  \n  // Property keys\n  export const PROPERTY_KEYS = {\n    API_KEY: Constants.PROPERTIES.API_KEY,\n    RESPONSE_MODE: Constants.PROPERTIES.RESPONSE_MODE,\n    AUTO_REPLY: Constants.PROPERTIES.AUTO_REPLY,\n    FORMALITY_LEVEL: Constants.PROPERTIES.FORMALITY_LEVEL,\n    RESPONSE_LENGTH: Constants.PROPERTIES.RESPONSE_LENGTH,\n    CUSTOM_INSTRUCTIONS: Constants.PROPERTIES.CUSTOM_INSTRUCTIONS,\n    SIGNATURE: Constants.PROPERTIES.SIGNATURE,\n    WRITING_STYLE: Constants.PROPERTIES.WRITING_STYLE,\n    LAST_ANALYSIS: Constants.PROPERTIES.LAST_ANALYSIS\n  };\n  \n  // Default settings\n  export const DEFAULT_SETTINGS: Types.Config = {\n    apiKey: '',\n    responseMode: Constants.RESPONSE.MODE_DRAFT as Types.ResponseMode,\n    autoReply: false,\n    formalityLevel: Constants.STYLE.FORMALITY_NEUTRAL,\n    responseLength: Constants.RESPONSE.LENGTH_MEDIUM as Types.ResponseLength,\n    customInstructions: '',\n    signature: Constants.EMAIL.DEFAULT_SIGNATURE\n  };\n  \n  // UI Constants\n  export const UI = {\n    CARD_WIDTH: Constants.UI.CARD_WIDTH,\n    MAX_BUTTON_TEXT_LENGTH: Constants.UI.MAX_BUTTON_TEXT_LENGTH,\n    NOTIFICATION_TIMEOUT: Constants.UI.NOTIFICATION_TIMEOUT_MS / 1000,\n    FORMALITY_LABELS: Constants.STYLE.FORMALITY_LABELS\n  };\n  \n  // Email patterns\n  export const EMAIL_PATTERNS = {\n    GREETING: Constants.PATTERNS.GREETING,\n    CLOSING: Constants.PATTERNS.CLOSING,\n    QUESTION: Constants.PATTERNS.QUESTION\n  };\n  \n  // System prompts (updated to use available types)\n  export const PROMPTS = {\n    SETTINGS: Constants.PROMPTS.TYPES.SETTINGS,\n    OVERVIEW: Constants.PROMPTS.TYPES.OVERVIEW,\n    THREAD: Constants.PROMPTS.TYPES.THREAD\n  };\n  \n  /**\n   * Get user properties - DEPRECATED: Use PropertyManager instead\n   * @deprecated\n   */\n  export function getUserProperties(): GoogleAppsScript.Properties.Properties {\n    AppLogger.warn('getUserProperties() is deprecated. Use PropertyManager methods instead.');\n    return PropertiesService.getUserProperties();\n  }\n  \n  /**\n   * Get a specific property with thread safety\n   */\n  export function getProperty(key: string): string {\n    return PropertyManager.getProperty(key, 'user') || '';\n  }\n  \n  /**\n   * Set a property with thread safety\n   */\n  export function setProperty(key: string, value: string): void {\n    if (!PropertyManager.setProperty(key, value, 'user')) {\n      throw new Error(`Failed to set property: ${key}`);\n    }\n  }\n  \n  /**\n   * Get all settings with thread safety\n   */\n  export function getSettings(): Types.Config {\n    const allProps = PropertyManager.getAllProperties('user');\n    \n    return {\n      apiKey: allProps[PROPERTY_KEYS.API_KEY] || DEFAULT_SETTINGS.apiKey,\n      responseMode: (allProps[PROPERTY_KEYS.RESPONSE_MODE] as Types.ResponseMode) || DEFAULT_SETTINGS.responseMode,\n      autoReply: allProps[PROPERTY_KEYS.AUTO_REPLY] === 'true',\n      formalityLevel: parseInt(allProps[PROPERTY_KEYS.FORMALITY_LEVEL] || String(DEFAULT_SETTINGS.formalityLevel)),\n      responseLength: (allProps[PROPERTY_KEYS.RESPONSE_LENGTH] as Types.ResponseLength) || \n        DEFAULT_SETTINGS.responseLength,\n      customInstructions: allProps[PROPERTY_KEYS.CUSTOM_INSTRUCTIONS] || DEFAULT_SETTINGS.customInstructions,\n      signature: allProps[PROPERTY_KEYS.SIGNATURE] || DEFAULT_SETTINGS.signature\n    };\n  }\n  \n  /**\n   * Save settings with thread safety\n   */\n  export function saveSettings(settings: Partial<Types.Config>): void {\n    const updates: {[key: string]: string} = {};\n    \n    if (settings.apiKey !== undefined) {\n      updates[PROPERTY_KEYS.API_KEY] = settings.apiKey;\n    }\n    if (settings.responseMode !== undefined) {\n      updates[PROPERTY_KEYS.RESPONSE_MODE] = settings.responseMode;\n    }\n    if (settings.autoReply !== undefined) {\n      updates[PROPERTY_KEYS.AUTO_REPLY] = String(settings.autoReply);\n    }\n    if (settings.formalityLevel !== undefined) {\n      updates[PROPERTY_KEYS.FORMALITY_LEVEL] = String(settings.formalityLevel);\n    }\n    if (settings.responseLength !== undefined) {\n      updates[PROPERTY_KEYS.RESPONSE_LENGTH] = settings.responseLength;\n    }\n    if (settings.customInstructions !== undefined) {\n      updates[PROPERTY_KEYS.CUSTOM_INSTRUCTIONS] = settings.customInstructions;\n    }\n    if (settings.signature !== undefined) {\n      updates[PROPERTY_KEYS.SIGNATURE] = settings.signature;\n    }\n    \n    // Batch update for better performance and atomicity\n    if (Object.keys(updates).length > 0) {\n      if (!PropertyManager.setProperties(updates, 'user')) {\n        throw new Error('Failed to save settings');\n      }\n    }\n  }\n}"]}