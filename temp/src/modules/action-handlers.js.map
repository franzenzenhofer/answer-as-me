{"version":3,"file":"action-handlers.js","sourceRoot":"","sources":["../../../src/modules/action-handlers.ts"],"names":[],"mappings":"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","sourcesContent":["namespace ActionHandlers {\n  /**\n   * Generate response action - WITH IMMEDIATE DOC CREATION & COMPREHENSIVE LOGGING\n   */\n  export function generateResponse(e: Types.ExtendedEventObject): GoogleAppsScript.Card_Service.ActionResponse {\n    DebugLogger.logUserAction('Generate Response', 'ActionHandlers', { hasGmail: !!e.gmail, hasMessageId: !!e.gmail?.messageId });\n    \n    try {\n      DebugLogger.info('ActionHandlers', '🚀 Starting response generation');\n      AppLogger.info('🚀 Starting response generation', {\n        hasGmail: !!e.gmail,\n        hasMessageId: !!e.gmail?.messageId,\n        timestamp: new Date().toISOString()\n      });\n      \n      // IMMEDIATELY CREATE PROMPT DOCUMENTS IF MISSING\n      try {\n        DebugLogger.info('ActionHandlers', 'Ensuring prompt documents exist');\n        GoogleDocsPrompts.createAllPromptDocuments();\n      } catch (error) {\n        DebugLogger.logError('ActionHandlers', error instanceof Error ? error : String(error), null, 'Failed to create prompt documents - may affect customization');\n      }\n      \n      // Get settings with enhanced debugging\n      const settings = Config.getSettings();\n      DebugLogger.logLogic('generateResponse', 'SETTINGS_LOADED', null, { \n        hasApiKey: !!settings.apiKey, \n        responseMode: settings.responseMode \n      });\n      AppLogger.info('📊 Settings loaded', {\n        hasApiKey: !!settings.apiKey,\n        apiKeyLength: settings.apiKey?.length || 0,\n        responseMode: settings.responseMode\n      });\n      \n      if (!settings.apiKey) {\n        AppLogger.warn('❌ No API key configured');\n        return CardService.newActionResponseBuilder()\n          .setNotification(\n            CardService.newNotification()\n              .setText('Please set your API key first')\n          )\n          .setNavigation(\n            CardService.newNavigation()\n              .pushCard(UI.buildMainCard(settings))\n          )\n          .build();\n      }\n      \n      // Get current message with enhanced error handling\n      AppLogger.info('📧 Getting current message from Gmail');\n      const message = GmailService.getCurrentMessage(e);\n      if (!message) {\n        AppLogger.error('❌ No Gmail message found', {\n          eventKeys: Object.keys(e),\n          gmailKeys: e.gmail ? Object.keys(e.gmail) : null\n        });\n        throw new ErrorHandling.AppError(\n          'No message found',\n          'NO_MESSAGE',\n          'Please select an email first'\n        );\n      }\n      \n      AppLogger.info('✅ Message found', {\n        subject: message.getSubject(),\n        from: message.getFrom(),\n        date: message.getDate()\n      });\n      \n      // Get email context with error boundary\n      AppLogger.info('📋 Extracting email context');\n      const context = GmailService.getEmailContext(message);\n      AppLogger.info('✅ Context extracted', {\n        hasSubject: !!context.subject,\n        hasBody: !!context.body,\n        hasFrom: !!context.from\n      });\n      \n      // Get writing style\n      const style = AI.getWritingStyle();\n      if (!style) {\n        throw new ErrorHandling.AppError(\n          'Unable to analyze writing style',\n          'STYLE_ERROR',\n          'Please ensure you have sent emails from this account'\n        );\n      }\n      \n      // Get user profile for context\n      const userProfile = UserProfile.getUserProfile();\n      \n      // Generate response using AI with context, style, user profile, and API key\n      const aiResponse = AI.generateEmailResponse(context, style, userProfile, settings.apiKey);\n      \n      if (!aiResponse.success || !aiResponse.response) {\n        // Provide detailed error message\n        let userMessage = 'Failed to generate response';\n        if (aiResponse.error) {\n          userMessage = aiResponse.error;\n        }\n        throw new ErrorHandling.AppError(\n          'Failed to generate response',\n          'AI_ERROR',\n          userMessage\n        );\n      }\n      \n      // Create draft\n      const draft = GmailService.createDraftReply(message, aiResponse.response);\n      \n      // Show success card\n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Response generated!')\n        )\n        .setNavigation(\n          CardService.newNavigation()\n            .pushCard(UI.buildResponseCard(aiResponse.response, draft.getId()))\n        )\n        .build();\n        \n    } catch (error) {\n      AppLogger.error('Failed to generate response', error);\n      \n      // Provide detailed error message to user\n      let errorMessage = 'Failed to generate response';\n      if (error instanceof ErrorHandling.AppError) {\n        errorMessage = error.userMessage || error.message;\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      // Create error card with detailed message\n      const errorCard = CardService.newCardBuilder()\n        .setHeader(\n          CardService.newCardHeader()\n            .setTitle('❌ Error Generating Response')\n        )\n        .addSection(\n          CardService.newCardSection()\n            .addWidget(\n              CardService.newTextParagraph()\n                .setText(`<b>Error:</b> ${errorMessage}`)\n            )\n            .addWidget(\n              CardService.newTextParagraph()\n                .setText('<b>What to do:</b>')\n            )\n            .addWidget(\n              CardService.newTextParagraph()\n                .setText('• Check your API key in Settings<br>• Ensure you have internet connection<br>• Try again in a moment<br>• If error persists, contact support')\n            )\n        )\n        .build();\n      \n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText(errorMessage)\n        )\n        .setNavigation(\n          CardService.newNavigation()\n            .pushCard(errorCard)\n        )\n        .build();\n    }\n  }\n  \n  /**\n   * Save settings action\n   */\n  export function saveSettings(e: Types.ExtendedEventObject): GoogleAppsScript.Card_Service.ActionResponse {\n    try {\n      const formData = e.formInputs;\n      if (!formData || typeof formData !== 'object') {\n        throw new Error('Invalid form data');\n      }\n      \n      // Build settings object from form\n      const updates: Partial<Types.Config> = {};\n      \n      // Validate and update API key\n      if ('apiKey' in formData) {\n        const typedFormData = formData as Types.FormInputs;\n        const apiKeyArray = typedFormData.apiKey;\n        if (Array.isArray(apiKeyArray) && apiKeyArray.length > 0) {\n          const apiKeyValue = String(apiKeyArray[0]);\n          if (apiKeyValue && !apiKeyValue.startsWith(Constants.API.KEY_MASK)) {\n            // Validate API key format\n            const validation = AI.validateApiKey(apiKeyValue);\n            if (!validation.isValid) {\n              return CardService.newActionResponseBuilder()\n                .setNotification(\n                  CardService.newNotification()\n                    .setText(validation.error || 'Invalid API key')\n                )\n                .build();\n            }\n            updates.apiKey = apiKeyValue;\n          }\n        }\n      }\n      \n      // Extract other form values safely\n      const getFormValue = (key: string): string | undefined => {\n        if (key in formData) {\n          const typedFormData = formData as Types.FormInputs;\n          const value = typedFormData[key];\n          if (Array.isArray(value) && value.length > 0) {\n            return String(value[0]);\n          }\n        }\n        return undefined;\n      };\n      \n      const responseMode = getFormValue('responseMode');\n      if (responseMode && ['draft', 'send', 'review'].includes(responseMode)) {\n        updates.responseMode = responseMode as Types.ResponseMode;\n      }\n      \n      const responseLength = getFormValue('responseLength');\n      if (responseLength && ['short', 'medium', 'long'].includes(responseLength)) {\n        updates.responseLength = responseLength as Types.ResponseLength;\n      }\n      \n      const customInstructions = getFormValue('customInstructions');\n      if (customInstructions !== undefined) {\n        updates.customInstructions = customInstructions.substring(0, 500);\n      }\n      \n      const signature = getFormValue('signature');\n      if (signature !== undefined) {\n        updates.signature = signature.substring(0, 200);\n      }\n      \n      // Save settings\n      Config.saveSettings(updates);\n      DebugLogger.logLogic('saveSettings', 'SETTINGS_SAVED', updates, { success: true });\n      \n      // ALWAYS CREATE PROMPT DOCUMENTS - IMMEDIATELY!\n      try {\n        DebugLogger.info('ActionHandlers', 'Auto-creating ALL prompt documents after settings save');\n        const results = GoogleDocsPrompts.createAllPromptDocuments();\n        const successCount = Object.values(results).filter(id => id).length;\n        \n        DebugLogger.logUserAction('Settings Saved', 'ActionHandlers', updates, `Settings saved, ${successCount} prompt docs created`);\n        \n        return CardService.newActionResponseBuilder()\n          .setNotification(\n            CardService.newNotification()\n              .setText(`Settings saved! ${successCount} prompt documents ready for editing.`)\n          )\n          .build();\n      } catch (error) {\n        DebugLogger.logError('ActionHandlers', error instanceof Error ? error : String(error), null, 'Failed to create prompt documents - user cannot customize');\n        AppLogger.warn('Failed to auto-create prompt documents', error);\n        // Continue with normal save response\n      }\n      \n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Settings saved successfully!')\n        )\n        .build();\n        \n    } catch (error) {\n      AppLogger.error('Failed to save settings', error);\n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Failed to save settings')\n        )\n        .build();\n    }\n  }\n  \n  /**\n   * Send response action\n   */\n  export function sendResponse(e: Types.ExtendedEventObject): GoogleAppsScript.Card_Service.ActionResponse {\n    try {\n      const formData = e.formInputs;\n      if (!formData || typeof formData !== 'object') {\n        throw new Error('No form data provided');\n      }\n      \n      // Safely extract edited response\n      let editedResponse = '';\n      if ('editedResponse' in formData) {\n        const typedFormData = formData as Types.FormInputs;\n        const value = typedFormData.editedResponse;\n        if (Array.isArray(value) && value.length > 0) {\n          editedResponse = String(value[0]);\n        }\n      }\n      // const _draftId = e.parameters?.draftId; // Not used in send\n      \n      if (!editedResponse) {\n        throw new ErrorHandling.AppError(\n          'No response text',\n          'NO_RESPONSE',\n          'Response text is empty'\n        );\n      }\n      \n      // Get current message\n      const message = GmailService.getCurrentMessage(e);\n      if (!message) {\n        throw new ErrorHandling.AppError(\n          'No message found',\n          'NO_MESSAGE',\n          'Could not find the original message'\n        );\n      }\n      \n      // Send the reply\n      GmailService.sendReply(message, editedResponse);\n      \n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Response sent successfully!')\n        )\n        .setNavigation(\n          CardService.newNavigation()\n            .popToRoot()\n        )\n        .build();\n        \n    } catch (error) {\n      AppLogger.error('Failed to send response', error);\n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Failed to send response')\n        )\n        .build();\n    }\n  }\n  \n  /**\n   * Save as draft action\n   */\n  export function saveAsDraft(e: Types.ExtendedEventObject): GoogleAppsScript.Card_Service.ActionResponse {\n    try {\n      const formData = e.formInputs;\n      if (!formData || typeof formData !== 'object') {\n        throw new Error('No form data provided');\n      }\n      \n      // Safely extract edited response\n      let editedResponse = '';\n      if ('editedResponse' in formData) {\n        const typedFormData = formData as Types.FormInputs;\n        const value = typedFormData.editedResponse;\n        if (Array.isArray(value) && value.length > 0) {\n          editedResponse = String(value[0]);\n        }\n      }\n      \n      const draftId = e.parameters?.draftId;\n      \n      if (!editedResponse) {\n        throw new ErrorHandling.AppError(\n          'No response text',\n          'NO_RESPONSE',\n          'Response text is empty'\n        );\n      }\n      \n      // Update existing draft or create new one\n      if (draftId) {\n        const success = GmailService.updateDraft(draftId, editedResponse);\n        if (!success) {\n          AppLogger.warn('Could not update draft, creating new one');\n        }\n      }\n      \n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Draft saved successfully!')\n        )\n        .build();\n        \n    } catch (error) {\n      AppLogger.error('Failed to save draft', error);\n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Failed to save draft')\n        )\n        .build();\n    }\n  }\n  \n  /**\n   * Edit response action\n   */\n  export function editResponse(e: Types.ExtendedEventObject): GoogleAppsScript.Card_Service.ActionResponse {\n    try {\n      const formData = e.formInputs;\n      if (!formData || typeof formData !== 'object') {\n        throw new Error('No form data provided');\n      }\n      \n      // Safely extract edited response\n      let editedResponse = '';\n      if ('editedResponse' in formData) {\n        const typedFormData = formData as Types.FormInputs;\n        const value = typedFormData.editedResponse;\n        if (Array.isArray(value) && value.length > 0) {\n          editedResponse = String(value[0]);\n        }\n      }\n      \n      const draftId = e.parameters?.draftId;\n      \n      // Re-generate with modifications\n      return CardService.newActionResponseBuilder()\n        .setNavigation(\n          CardService.newNavigation()\n            .updateCard(UI.buildResponseCard(editedResponse, draftId))\n        )\n        .build();\n        \n    } catch (error) {\n      AppLogger.error('Failed to edit response', error);\n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Failed to edit response')\n        )\n        .build();\n    }\n  }\n  \n  /**\n   * Learn from thread action\n   */\n  export function learnFromThread(e: Types.ExtendedEventObject): GoogleAppsScript.Card_Service.ActionResponse {\n    try {\n      AppLogger.info('Learning from current thread');\n      \n      // Get current message and thread\n      const message = GmailService.getCurrentMessage(e);\n      if (!message) {\n        throw new ErrorHandling.AppError(\n          'No message found',\n          'NO_MESSAGE',\n          'Please select an email first'\n        );\n      }\n      \n      const thread = message.getThread();\n      const messages = thread.getMessages();\n      \n      // Check if thread has messages from the user\n      const userEmail = Session.getActiveUser().getEmail();\n      const hasUserMessages = messages.some(msg => \n        msg.getFrom().toLowerCase().includes(userEmail.toLowerCase())\n      );\n      \n      if (!hasUserMessages) {\n        return CardService.newActionResponseBuilder()\n          .setNotification(\n            CardService.newNotification()\n              .setText('No messages from you in this thread')\n          )\n          .build();\n      }\n      \n      // Improve profile from thread\n      const improvementPrompt = UserProfile.getImprovementPrompt(thread);\n      const apiKey = Config.getProperty(Config.PROPERTY_KEYS.API_KEY);\n      const improveResponse = AI.callGeminiAPI(improvementPrompt, apiKey);\n      \n      if (improveResponse.success && improveResponse.response) {\n        try {\n          const improved = JSON.parse(improveResponse.response);\n          UserProfile.applyImprovements(improved);\n        } catch (_e) {\n          AppLogger.error('Failed to parse profile improvements', _e);\n        }\n      }\n      \n      // Also update writing style\n      const currentStyle = AI.getWritingStyle();\n      if (!currentStyle) {\n        AppLogger.warn('No current writing style found, skipping style improvement');\n        return CardService.newActionResponseBuilder()\n          .setNotification(\n            CardService.newNotification()\n              .setText('Successfully learned from this thread!')\n          )\n          .setNavigation(\n            CardService.newNavigation()\n              .updateCard(EntryPoints.buildMessageCard(e))\n          )\n          .build();\n      }\n      \n      const improvedStyle = StyleImprover.improveStyleFromThread(\n        currentStyle,\n        thread\n      );\n      \n      if (improvedStyle) {\n        Config.setProperty(Config.PROPERTY_KEYS.WRITING_STYLE, JSON.stringify(improvedStyle));\n        Config.setProperty(Config.PROPERTY_KEYS.LAST_ANALYSIS, new Date().toISOString());\n      }\n      \n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Successfully learned from this thread!')\n        )\n        .setNavigation(\n          CardService.newNavigation()\n            .updateCard(EntryPoints.buildMessageCard(e))\n        )\n        .build();\n        \n    } catch (error) {\n      AppLogger.error('Failed to learn from thread', error);\n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Failed to learn from thread')\n        )\n        .build();\n    }\n  }\n\n  /**\n   * Show prompt management\n   */\n  export function showPromptManagement(_e: Types.ExtendedEventObject): GoogleAppsScript.Card_Service.ActionResponse {\n    try {\n      // Redirect to Settings card instead of separate Prompt Management card\n      const settings = Config.getSettings();\n      return CardService.newActionResponseBuilder()\n        .setNavigation(\n          CardService.newNavigation()\n            .pushCard(UI.buildSettingsCard(settings))\n        )\n        .build();\n    } catch (error) {\n      AppLogger.error('Failed to show prompt management', error);\n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Failed to open prompt management')\n        )\n        .build();\n    }\n  }\n\n  /**\n   * Handle create prompt document\n   */\n  export function handleCreatePromptDoc(e: Types.ExtendedEventObject): GoogleAppsScript.Card_Service.ActionResponse {\n    try {\n      const promptType = e.parameters?.promptType;\n      if (!promptType) {\n        throw new Error('No prompt type specified');\n      }\n\n      // Create the document\n      const docId = GoogleDocsPrompts.getOrCreatePromptDocument(promptType);\n      const doc = DocumentApp.openById(docId);\n      const url = doc.getUrl();\n\n      // Open the document\n      return CardService.newActionResponseBuilder()\n        .setOpenLink(\n          CardService.newOpenLink()\n            .setUrl(url)\n            .setOpenAs(CardService.OpenAs.FULL_SIZE)\n            .setOnClose(CardService.OnClose.RELOAD_ADD_ON)\n        )\n        .build();\n    } catch (error) {\n      AppLogger.error('Failed to create prompt document', error);\n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Failed to create prompt document')\n        )\n        .build();\n    }\n  }\n\n  /**\n   * Handle update all prompts\n   */\n  export function handleUpdateAllPrompts(_e: Types.ExtendedEventObject): GoogleAppsScript.Card_Service.ActionResponse {\n    try {\n      // Update all prompts\n      const result = GoogleDocsPrompts.updateAllPrompts();\n      \n      // Show notification with results\n      return UI.showPromptUpdateNotification(result.updated, result.failed);\n    } catch (error) {\n      AppLogger.error('Failed to update prompts', error);\n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Failed to update prompts')\n        )\n        .build();\n    }\n  }\n  \n  /**\n   * Open prompts document (universal action)\n   */\n  export function openPromptsDocument(_e: Types.ExtendedEventObject): GoogleAppsScript.Card_Service.ActionResponse {\n    try {\n      AppLogger.info('Opening prompts document');\n      \n      // Get or create the settings prompts document\n      const docId = GoogleDocsPrompts.getOrCreatePromptDocument(Constants.PROMPTS.TYPES.SETTINGS);\n      const doc = DocumentApp.openById(docId);\n      const url = doc.getUrl();\n      \n      // Open the document in a new tab\n      return CardService.newActionResponseBuilder()\n        .setOpenLink(\n          CardService.newOpenLink()\n            .setUrl(url)\n            .setOpenAs(CardService.OpenAs.FULL_SIZE)\n            .setOnClose(CardService.OnClose.RELOAD_ADD_ON)\n        )\n        .build();\n    } catch (error) {\n      AppLogger.error('Failed to open prompts document', error);\n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Failed to open prompts document. Please check permissions.')\n        )\n        .build();\n    }\n  }\n\n  /**\n   * Generate response with specific formality level\n   */\n  export function generateResponseWithFormality(\n    e: Types.ExtendedEventObject\n  ): GoogleAppsScript.Card_Service.ActionResponse {\n    try {\n      AppLogger.info('Generating response with specific formality');\n      \n      // Get formality level from parameters\n      const formality = e.parameters?.formality;\n      if (!formality) {\n        throw new Error('No formality level specified');\n      }\n\n      // Get settings and temporarily override formality\n      const settings = Config.getSettings();\n      if (!settings.apiKey) {\n        return CardService.newActionResponseBuilder()\n          .setNotification(\n            CardService.newNotification()\n              .setText('Please set your API key first')\n          )\n          .setNavigation(\n            CardService.newNavigation()\n              .pushCard(UI.buildSettingsCard(settings))\n          )\n          .build();\n      }\n      \n      // Override formality level\n      const formalityLevel = parseInt(formality);\n      const adjustedSettings = { ...settings, formalityLevel };\n      \n      // Get current message\n      const message = GmailService.getCurrentMessage(e);\n      if (!message) {\n        throw new ErrorHandling.AppError(\n          'No message found',\n          'NO_MESSAGE',\n          'Please select an email first'\n        );\n      }\n      \n      // Get email context\n      const context = GmailService.getEmailContext(message);\n      \n      // Get writing style\n      const style = AI.getWritingStyle();\n      if (!style) {\n        throw new ErrorHandling.AppError(\n          'Unable to analyze writing style',\n          'STYLE_ERROR',\n          'Please ensure you have sent emails from this account'\n        );\n      }\n      \n      // Get user profile\n      const userProfile = UserProfile.getUserProfile();\n      \n      // Generate response with adjusted formality\n      const aiResponse = AI.generateEmailResponse(context, style, userProfile, adjustedSettings.apiKey);\n      \n      if (!aiResponse.success || !aiResponse.response) {\n        let userMessage = 'Failed to generate response';\n        if (aiResponse.error) {\n          userMessage = aiResponse.error;\n        }\n        throw new ErrorHandling.AppError(\n          'Failed to generate response',\n          'AI_ERROR',\n          userMessage\n        );\n      }\n      \n      // Create draft\n      const draft = GmailService.createDraftReply(message, aiResponse.response);\n      \n      // Show success card\n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText(`Response generated with ${Constants.STYLE.FORMALITY_LABELS[formalityLevel - 1]} tone!`)\n        )\n        .setNavigation(\n          CardService.newNavigation()\n            .pushCard(UI.buildResponseCard(aiResponse.response, draft.getId()))\n        )\n        .build();\n        \n    } catch (error) {\n      AppLogger.error('Failed to generate response with formality', error);\n      \n      let errorMessage = 'Failed to generate response';\n      if (error instanceof ErrorHandling.AppError) {\n        errorMessage = error.userMessage || error.message;\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText(errorMessage)\n        )\n        .build();\n    }\n  }\n\n  /**\n   * Factory reset - delete ALL data and start completely fresh\n   */\n  export function factoryReset(_e: Types.ExtendedEventObject): GoogleAppsScript.Card_Service.ActionResponse {\n    try {\n      AppLogger.info('FACTORY RESET INITIATED - Deleting all user data');\n      \n      // Delete all user properties\n      const userProperties = PropertiesService.getUserProperties();\n      const userKeys = userProperties.getKeys();\n      for (const key of userKeys) {\n        userProperties.deleteProperty(key);\n      }\n      \n      // Delete all script properties\n      const scriptProperties = PropertiesService.getScriptProperties();\n      const scriptKeys = scriptProperties.getKeys();\n      for (const key of scriptKeys) {\n        scriptProperties.deleteProperty(key);\n      }\n      \n      // Delete all documents if they exist\n      try {\n        // Get prompt documents\n        const promptTypes = ['main', 'style', 'profile'];\n        for (const promptType of promptTypes) {\n          try {\n            const docId = GoogleDocsPrompts.getOrCreatePromptDocument(promptType);\n            if (docId) {\n              DriveApp.getFileById(docId).setTrashed(true);\n              AppLogger.info(`Deleted prompt document: ${promptType}`);\n            }\n          } catch (error) {\n            // Document doesn't exist or can't be deleted - continue\n            AppLogger.info(`Could not delete ${promptType} document: ${error}`);\n          }\n        }\n      } catch (error) {\n        AppLogger.warn('Error during document cleanup', error);\n      }\n      \n      AppLogger.info('FACTORY RESET COMPLETED - All data deleted');\n      \n      // Return to fresh settings card\n      const freshSettings = Config.getSettings(); // Will be empty now\n      \n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('🔴 FACTORY RESET COMPLETE - All data deleted!')\n        )\n        .setNavigation(\n          CardService.newNavigation()\n            .updateCard(UI.buildSettingsCard(freshSettings))\n        )\n        .build();\n        \n    } catch (error) {\n      AppLogger.error('Failed during factory reset', error);\n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('Factory reset failed - some data may remain')\n        )\n        .build();\n    }\n  }\n\n  /**\n   * Test API key with debugging information\n   */\n  export function testApiKey(_e: Types.ExtendedEventObject): GoogleAppsScript.Card_Service.ActionResponse {\n    try {\n      AppLogger.info('API Key test initiated by user');\n      \n      const settings = Config.getSettings();\n      if (!settings.apiKey) {\n        return CardService.newActionResponseBuilder()\n          .setNotification(\n            CardService.newNotification()\n              .setText('❌ No API key found - please enter one first')\n          )\n          .build();\n      }\n\n      // Test the API key\n      const testResult = AI.testApiKey(settings.apiKey);\n      \n      if (testResult.success) {\n        return CardService.newActionResponseBuilder()\n          .setNotification(\n            CardService.newNotification()\n              .setText(`✅ API KEY WORKS! ${settings.apiKey.substring(0, 8)}...${settings.apiKey.slice(-4)} is valid`)\n          )\n          .build();\n      } else {\n        return CardService.newActionResponseBuilder()\n          .setNotification(\n            CardService.newNotification()\n              .setText(`❌ API KEY FAILED: ${testResult.error}`)\n          )\n          .build();\n      }\n      \n    } catch (error) {\n      AppLogger.error('Failed to test API key', error);\n      return CardService.newActionResponseBuilder()\n        .setNotification(\n          CardService.newNotification()\n            .setText('❌ Test failed - check logs for details')\n        )\n        .build();\n    }\n  }\n}"]}