{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../src/modules/logger.ts"],"names":[],"mappings":"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","sourcesContent":["namespace AppLogger {\n  export enum LogLevel {\n    DEBUG = Constants.LOG.LEVEL_DEBUG,\n    INFO = Constants.LOG.LEVEL_INFO,\n    WARN = Constants.LOG.LEVEL_WARN,\n    ERROR = Constants.LOG.LEVEL_ERROR\n  }\n  \n  let currentLogLevel = LogLevel.INFO;\n  \n  /**\n   * Set the logging level\n   */\n  export function setLogLevel(level: LogLevel): void {\n    currentLogLevel = level;\n  }\n  \n  /**\n   * Log debug message\n   */\n  export function debug(message: string, data?: any): void {\n    if (currentLogLevel <= LogLevel.DEBUG) {\n      // eslint-disable-next-line no-console\n      console.log(`${Constants.LOG.PREFIX_DEBUG} ${message}`, data || '');\n    }\n  }\n  \n  /**\n   * Log info message\n   */\n  export function info(message: string, data?: any): void {\n    if (currentLogLevel <= LogLevel.INFO) {\n      // eslint-disable-next-line no-console\n      console.info(`${Constants.LOG.PREFIX_INFO} ${message}`, data || '');\n    }\n  }\n  \n  /**\n   * Log warning message\n   */\n  export function warn(message: string, data?: any): void {\n    if (currentLogLevel <= LogLevel.WARN) {\n      console.warn(`${Constants.LOG.PREFIX_WARN} ${message}`, data || '');\n    }\n  }\n  \n  /**\n   * Log error message\n   */\n  export function error(message: string, error?: any): void {\n    if (currentLogLevel <= LogLevel.ERROR) {\n      console.error(`${Constants.LOG.PREFIX_ERROR} ${message}`, error || '');\n      \n      // Also log to Stackdriver for production errors\n      if (error instanceof Error) {\n        console.error(`Stack trace: ${error.stack}`);\n      }\n    }\n  }\n  \n  /**\n   * Redact sensitive information from logs\n   */\n  export function redact(text: string): string {\n    // Redact email addresses\n    text = text.replace(Constants.PATTERNS.EMAIL_ADDRESS, Constants.LOG.REDACTED_EMAIL);\n    \n    // Redact API keys (looking for long alphanumeric strings)\n    text = text.replace(Constants.PATTERNS.API_KEY, Constants.LOG.REDACTED_API_KEY);\n    \n    // Redact potential names (simple heuristic)\n    text = text.replace(/\\b[A-Z][a-z]+ [A-Z][a-z]+\\b/g, Constants.LOG.REDACTED_NAME);\n    \n    return text;\n  }\n  \n  /**\n   * Log with automatic redaction\n   */\n  export function logSafe(level: LogLevel, message: string, data?: any): void {\n    const safeMessage = redact(message);\n    const safeData = data ? redact(JSON.stringify(data)) : undefined;\n    \n    switch (level) {\n    case LogLevel.DEBUG:\n      debug(safeMessage, safeData);\n      break;\n    case LogLevel.INFO:\n      info(safeMessage, safeData);\n      break;\n    case LogLevel.WARN:\n      warn(safeMessage, safeData);\n      break;\n    case LogLevel.ERROR:\n      error(safeMessage, safeData);\n      break;\n    }\n  }\n}"]}