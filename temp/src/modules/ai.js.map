{"version":3,"file":"ai.js","sourceRoot":"","sources":["../../../src/modules/ai.ts"],"names":[],"mappings":"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","sourcesContent":["namespace AI {\n  /**\n   * Response schema types for strict JSON mode\n   */\n  export interface ResponseSchema {\n    type: string;\n    properties?: { [key: string]: unknown };\n    required?: string[];\n    items?: unknown;\n    enum?: string[];\n  }\n\n  /**\n   * Tool configuration for Gemini API\n   */\n  export interface GeminiTool {\n    google_search?: {};\n    code_execution?: {};\n  }\n\n  /**\n   * Test API key with simple request - SUPER DEBUGGABLE\n   */\n  export function testApiKey(apiKey: string): { success: boolean; error?: string } {\n    const startTime = Date.now();\n    DebugLogger.logAI('REQUEST', 'AI.testApiKey', 'Say \"API key works!\"', {\n      apiKey: `${apiKey.substring(0, 8)}...${apiKey.slice(-4)}`,\n      length: apiKey.length,\n      isValid: apiKey.startsWith('AIza'),\n      purpose: 'API_KEY_TEST'\n    });\n    \n    AppLogger.info('🧪 TESTING API KEY', {\n      key: `${apiKey.substring(0, 8)}...${apiKey.slice(-4)}`,\n      length: apiKey.length,\n      isValid: apiKey.startsWith('AIza'),\n      timestamp: new Date().toISOString()\n    });\n    \n    const testResult = callGeminiAPI('Say \"API key works!\"', apiKey);\n    const duration = Date.now() - startTime;\n    \n    if (testResult.success) {\n      DebugLogger.logAI('RESPONSE', 'AI.testApiKey', testResult.response || 'success', {\n        success: true,\n        duration: duration,\n        purpose: 'API_KEY_TEST'\n      });\n      AppLogger.info('✅ API KEY TEST PASSED', testResult);\n      return { success: true };\n    } else {\n      DebugLogger.logAI('RESPONSE', 'AI.testApiKey', testResult.error || 'failed', {\n        success: false,\n        duration: duration,\n        error: testResult.error,\n        purpose: 'API_KEY_TEST'\n      });\n      AppLogger.error('❌ API KEY TEST FAILED', testResult);\n      return { success: false, error: testResult.error };\n    }\n  }\n\n  /**\n   * Call Gemini API with enhanced features - SUPER DEBUGGABLE\n   * - Strict JSON mode\n   * - Google Search grounding\n   * - Code execution\n   */\n  export function callGeminiAPI(\n    prompt: string, \n    apiKey: string,\n    options?: {\n      jsonMode?: boolean;\n      responseSchema?: ResponseSchema;\n      enableGrounding?: boolean;\n      enableCodeExecution?: boolean;\n    }\n  ): Types.AIResponse {\n    const startTime = Date.now();\n    const requestId = Utilities.getUuid().substring(0, 8);\n    \n    // Log the request with comprehensive details\n    DebugLogger.logAI('REQUEST', 'AI.callGeminiAPI', prompt, {\n      requestId: requestId,\n      apiKey: `${apiKey.substring(0, 8)}...${apiKey.slice(-4)}`,\n      options: options,\n      promptLength: prompt.length,\n      timestamp: new Date().toISOString()\n    });\n    \n    // Validate API key\n    const keyValidation = validateApiKey(apiKey);\n    if (!keyValidation.isValid) {\n      const duration = Date.now() - startTime;\n      const error = keyValidation.error || Constants.ERRORS.MSG_API_KEY_REQUIRED;\n      \n      DebugLogger.logAI('RESPONSE', 'AI.callGeminiAPI', error, {\n        requestId: requestId,\n        success: false,\n        duration: duration,\n        error: error,\n        validationFailed: true\n      });\n      \n      return {\n        success: false,\n        error: error\n      };\n    }\n    \n    try {\n      // Build generation config\n      const generationConfig: Record<string, unknown> = {\n        temperature: Config.API_TEMPERATURE,\n        maxOutputTokens: Config.API_MAX_TOKENS,\n        topK: Constants.API.TOP_K,\n        topP: Constants.API.TOP_P\n      };\n\n      // Enable strict JSON mode if requested\n      if (options?.jsonMode) {\n        generationConfig.response_mime_type = 'application/json';\n        \n        // Add response schema if provided\n        if (options.responseSchema) {\n          generationConfig.response_schema = options.responseSchema;\n        }\n      }\n\n      // Build tools array\n      const tools: GeminiTool[] = [];\n      \n      // Add Google Search grounding if enabled\n      if (options?.enableGrounding) {\n        tools.push({ google_search: {} });\n      }\n      \n      // Add code execution if enabled\n      if (options?.enableCodeExecution) {\n        tools.push({ code_execution: {} });\n      }\n\n      // Build payload\n      const payload: Record<string, unknown> = {\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig\n      };\n\n      // Add tools if any are enabled\n      if (tools.length > 0) {\n        payload.tools = tools;\n      }\n      \n      // CRITICAL FIX: Use URL parameter auth for Apps Script compatibility\n      const urlWithKey = `${Config.GEMINI_API_URL}?key=${apiKey}`;\n      \n      const requestOptions: GoogleAppsScript.URL_Fetch.URLFetchRequestOptions = {\n        method: Constants.API.HTTP_METHOD_POST as GoogleAppsScript.URL_Fetch.HttpMethod,\n        contentType: Constants.API.CONTENT_TYPE_JSON,\n        payload: JSON.stringify(payload),\n        muteHttpExceptions: true\n      };\n      \n      AppLogger.info('🚀 Calling Gemini API (URL param auth)', { \n        url: Config.GEMINI_API_URL,\n        apiKey: `${apiKey.substring(0, 8)}...${apiKey.slice(-4)}`,\n        jsonMode: options?.jsonMode,\n        grounding: options?.enableGrounding,\n        codeExecution: options?.enableCodeExecution,\n        payloadSize: JSON.stringify(payload).length,\n        authMethod: 'URL_PARAMETER'\n      });\n      \n      // Use retry logic with timeout monitoring\n      const response = Utils.retryWithBackoff(\n        () => Utils.fetchWithTimeout(urlWithKey, requestOptions),\n        3, // max retries\n        1000 // initial delay\n      );\n      \n      const responseCode = response.getResponseCode();\n      \n      if (responseCode !== Constants.API.STATUS_OK) {\n        const errorContent = response.getContentText();\n        AppLogger.error(`Gemini API error: ${responseCode}`, errorContent);\n        \n        // Parse error response for detailed message\n        let errorMessage = `API error: ${responseCode}`;\n        try {\n          const errorData = JSON.parse(errorContent);\n          if (errorData.error) {\n            const apiError = errorData.error;\n            \n            // Provide specific error messages based on error type\n            switch (responseCode) {\n            case 400:\n              if (apiError.message.includes('API_KEY_INVALID')) {\n                errorMessage = 'Invalid API key. Please check your API key in Settings.';\n              } else if (apiError.message.includes('REQUEST_SIZE')) {\n                errorMessage = 'Email content too large. Try a shorter email.';\n              } else {\n                errorMessage = `Bad request: ${apiError.message}`;\n              }\n              break;\n                \n            case 401:\n              errorMessage = 'API key not authorized. Please check your API key is active.';\n              break;\n                \n            case 403:\n              if (apiError.message.includes('PERMISSION_DENIED')) {\n                errorMessage = 'Permission denied. Check API key permissions.';\n              } else if (apiError.message.includes('BILLING')) {\n                errorMessage = 'Billing not enabled for this API key.';\n              } else if (apiError.message.includes('LOCATION')) {\n                errorMessage = 'Gemini API not available in your location.';\n              } else {\n                errorMessage = `Access forbidden: ${apiError.message}`;\n              }\n              break;\n                \n            case 429:\n              errorMessage = 'Too many requests. Please wait a moment and try again.';\n              break;\n                \n            case 500:\n            case 502:\n            case 503:\n              errorMessage = 'Google server error. Please try again in a few minutes.';\n              break;\n                \n            default:\n              errorMessage = apiError.message || `API error: ${responseCode}`;\n            }\n          }\n        } catch (parseError) {\n          // If we can't parse the error, use the response code\n          AppLogger.warn('Could not parse API error response', parseError);\n        }\n        \n        return {\n          success: false,\n          error: errorMessage\n        };\n      }\n      \n      // Parse response with error boundary\n      let result: unknown;\n      try {\n        result = JSON.parse(response.getContentText());\n      } catch (parseError) {\n        AppLogger.error('Failed to parse Gemini API response', {\n          error: parseError,\n          responseText: response.getContentText().substring(0, 500)\n        });\n        return {\n          success: false,\n          error: 'Invalid JSON response from API'\n        };\n      }\n      \n      // Type guard for API response\n      interface ApiResponse {\n        error?: { message?: string };\n        candidates?: Array<{\n          content?: { parts?: Array<{ text?: string }> };\n          finishReason?: string;\n          groundingMetadata?: { webSearchQueries?: unknown[] };\n          safetyRatings?: Array<{ probability?: number }>;\n        }>;\n      }\n      \n      const isApiResponse = (obj: unknown): obj is ApiResponse => {\n        return typeof obj === 'object' && obj !== null;\n      };\n      \n      if (!isApiResponse(result)) {\n        return {\n          success: false,\n          error: 'Invalid API response format'\n        };\n      }\n      \n      // Check for API-level errors\n      if (result.error) {\n        AppLogger.error('Gemini API returned error', result.error);\n        return {\n          success: false,\n          error: result.error.message || 'API error'\n        };\n      }\n      \n      // Extract text from response\n      const text = result.candidates?.[0]?.content?.parts?.[0]?.text;\n      \n      if (!text) {\n        AppLogger.warn('No text in Gemini response', {\n          hassCandidates: !!result.candidates,\n          candidatesLength: result.candidates?.length,\n          finishReason: result.candidates?.[0]?.finishReason\n        });\n        return {\n          success: false,\n          error: Constants.ERRORS.MSG_NO_RESPONSE_TEXT\n        };\n      }\n      \n      // If grounding was used, extract grounding metadata\n      let groundingMetadata = null;\n      if (options?.enableGrounding && result.candidates?.[0]?.groundingMetadata) {\n        groundingMetadata = result.candidates[0].groundingMetadata;\n        AppLogger.info('Grounding metadata available', {\n          searchQueries: groundingMetadata.webSearchQueries?.length || 0\n        });\n      }\n      \n      const duration = Date.now() - startTime;\n      const responseLength = text.length;\n      \n      // Log successful response\n      DebugLogger.logAI('RESPONSE', 'AI.callGeminiAPI', text.substring(0, 500) + (text.length > 500 ? '...' : ''), {\n        requestId: requestId,\n        success: true,\n        duration: duration,\n        responseLength: responseLength,\n        confidence: result.candidates?.[0]?.safetyRatings?.[0]?.probability || 1,\n        finishReason: result.candidates?.[0]?.finishReason,\n        hasGrounding: !!groundingMetadata\n      });\n      \n      return {\n        success: true,\n        response: text,\n        confidence: result.candidates?.[0]?.safetyRatings?.[0]?.probability || 1\n      };\n      \n    } catch (error) {\n      const duration = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      \n      // Log the error with full context\n      DebugLogger.logError('AI.callGeminiAPI', error instanceof Error ? error : String(error), {\n        requestId: requestId,\n        duration: duration,\n        prompt: `${prompt.substring(0, 200)  }...`,\n        options: options\n      }, 'AI request failed - user cannot generate email responses');\n      \n      // Check if error is timeout-related\n      \n      if (errorMessage.toLowerCase().includes('timeout') || \n          errorMessage.toLowerCase().includes('timed out')) {\n        AppLogger.error('API request timed out', {\n          error: errorMessage,\n          url: Config.GEMINI_API_URL\n        });\n        return {\n          success: false,\n          error: 'Request timed out. Check your internet connection and try again.'\n        };\n      }\n      \n      // Check for network errors\n      if (errorMessage.toLowerCase().includes('fetch failed') ||\n          errorMessage.toLowerCase().includes('network') ||\n          errorMessage.toLowerCase().includes('dns')) {\n        AppLogger.error('Network error', {\n          error: errorMessage,\n          url: Config.GEMINI_API_URL\n        });\n        return {\n          success: false,\n          error: 'Network error. Please check your internet connection.'\n        };\n      }\n      \n      // Check for SSL/certificate errors\n      if (errorMessage.toLowerCase().includes('ssl') ||\n          errorMessage.toLowerCase().includes('certificate')) {\n        AppLogger.error('SSL error', {\n          error: errorMessage,\n          url: Config.GEMINI_API_URL\n        });\n        return {\n          success: false,\n          error: 'Security error. Please check your network settings.'\n        };\n      }\n      \n      AppLogger.error('Gemini API call failed', error);\n      return {\n        success: false,\n        error: `Error: ${errorMessage}. Please try again or contact support.`\n      };\n    }\n  }\n  \n  /**\n   * Generate email response\n   */\n  export function generateEmailResponse(\n    context: Types.EmailContext,\n    style: Types.WritingStyle,\n    userProfile: Types.UserProfile,\n    apiKey: string\n  ): Types.AIResponse {\n    try {\n      const prompt = Prompts.getResponseGenerationPrompt(\n        context,\n        style,\n        userProfile,\n        Config.getSettings().customInstructions\n      );\n      \n      // Use standard mode for email generation (not JSON)\n      return callGeminiAPI(prompt, apiKey, {\n        enableGrounding: true // Enable grounding for more accurate responses\n      });\n      \n    } catch (error) {\n      AppLogger.error('Failed to generate response', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  }\n  \n  /**\n   * Analyze writing style with robust error handling\n   */\n  export function analyzeWritingStyle(emails: string[], apiKey: string): Types.WritingStyle | null {\n    // Validate inputs first\n    if (!emails || !Array.isArray(emails) || emails.length === 0) {\n      AppLogger.warn('No emails provided for style analysis');\n      return null;\n    }\n    \n    if (!apiKey || typeof apiKey !== 'string' || apiKey.trim().length === 0) {\n      AppLogger.warn('No valid API key provided for style analysis');\n      return null;\n    }\n    \n    try {\n      // Filter and validate email content\n      const validEmails = emails.filter(email => \n        email && typeof email === 'string' && email.trim().length > 10\n      );\n      \n      if (validEmails.length === 0) {\n        AppLogger.warn('No valid email content for style analysis');\n        return null;\n      }\n      \n      const prompt = Prompts.getStyleAnalysisPrompt(Session.getActiveUser().getEmail());\n      const combinedEmails = validEmails.join('\\n\\n---\\n\\n');\n      const fullPrompt = `${prompt}\\n\\nEmails to analyze:\\n${combinedEmails}`;\n      \n      // Use simple schema generation with error handling\n      let responseSchema;\n      try {\n        responseSchema = JsonValidator.createWritingStyleSchema();\n      } catch (schemaError) {\n        AppLogger.error('Failed to create response schema', schemaError);\n        return null;\n      }\n      \n      const response = callGeminiAPI(fullPrompt, apiKey, {\n        jsonMode: true,\n        responseSchema,\n        enableCodeExecution: true // Can help with analyzing patterns\n      });\n      \n      if (!response.success || !response.response) {\n        AppLogger.error('Style analysis API call failed', response.error);\n        return null;\n      }\n      \n      // Parse and validate the response with comprehensive error handling\n      let parsed: unknown;\n      try {\n        parsed = JsonValidator.parseJson<any>(response.response, 'Writing Style Analysis');\n        if (!parsed) {\n          throw new Error('JSON parser returned null/undefined');\n        }\n      } catch (parseError) {\n        AppLogger.error('Failed to parse style analysis response', {\n          error: parseError,\n          responseText: response.response?.substring(0, 500),\n          responseLength: response.response?.length\n        });\n        return null;\n      }\n      \n      // Validate and provide defaults with error handling\n      try {\n        const validatedStyle = JsonValidator.validateWritingStyle(parsed);\n        if (validatedStyle) {\n          AppLogger.info('Successfully analyzed writing style from emails');\n          return validatedStyle;\n        } else {\n          AppLogger.warn('Style validation returned null');\n          return null;\n        }\n      } catch (validationError) {\n        AppLogger.error('Failed to validate writing style', validationError);\n        return null;\n      }\n      \n    } catch (error) {\n      AppLogger.error('Unexpected error in style analysis', {\n        error: error,\n        message: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Create a default writing style - bulletproof fallback\n   */\n  function createDefaultWritingStyle(): Types.WritingStyle {\n    return {\n      greetings: [\n        'Hi',\n        'Hello',\n        'Good morning',\n        'Good afternoon',\n        'Dear'\n      ],\n      closings: [\n        'Best regards',\n        'Thanks',\n        'Kind regards',\n        'Cheers',\n        'Best'\n      ],\n      sentencePatterns: [\n        'I hope this email finds you well.',\n        'Thank you for your message.',\n        'I wanted to follow up on',\n        'Please let me know if you have any questions.'\n      ],\n      vocabulary: [\n        'please',\n        'thank you',\n        'regarding',\n        'following up',\n        'appreciate',\n        'understand',\n        'available',\n        'discuss'\n      ],\n      formalityLevel: 3, // Medium formality (1-5 scale)\n      averageSentenceLength: 15,\n      emailLength: 'medium',\n      punctuationStyle: 'standard'\n    };\n  }\n\n  /**\n   * Get writing style - BULLETPROOF version that ALWAYS returns a valid style\n   * KISS principle: Keep it simple, always work\n   */\n  export function getWritingStyle(): Types.WritingStyle {\n    const config = Config.getSettings();\n    \n    // Step 1: Try to get cached style (safest option)\n    try {\n      const cached = PropertyManager.getProperty(Constants.PROPERTIES.WRITING_STYLE, 'user');\n      if (cached) {\n        const parsedCache = JSON.parse(cached);\n        // Validate cached data structure\n        if (parsedCache && typeof parsedCache === 'object' && \n            Array.isArray(parsedCache.greetings) && Array.isArray(parsedCache.closings) &&\n            typeof parsedCache.formalityLevel === 'number') {\n          AppLogger.info('Using cached writing style');\n          return parsedCache;\n        }\n        AppLogger.warn('Invalid cached writing style, will regenerate');\n      }\n    } catch (error) {\n      AppLogger.warn('Failed to parse cached writing style', error);\n      // Continue to next step - don't fail\n    }\n\n    // Step 2: Try to analyze recent emails (if API key is available)\n    if (config.apiKey) {\n      try {\n        const emails = GmailService.getRecentSentEmails(Constants.EMAIL.MAX_SENT_EMAILS_TO_ANALYZE);\n        \n        if (emails && emails.length > 0) {\n          // Safely extract email bodies with validation\n          const emailBodies: string[] = [];\n          for (const email of emails) {\n            if (email && typeof email === 'object' && email.body && typeof email.body === 'string' && email.body.trim().length > 10) {\n              emailBodies.push(email.body);\n            }\n          }\n          \n          if (emailBodies.length > 0) {\n            const style = analyzeWritingStyle(emailBodies, config.apiKey);\n            if (style) {\n              // Cache the successful result\n              try {\n                PropertyManager.setProperty(\n                  Constants.PROPERTIES.WRITING_STYLE,\n                  JSON.stringify(style),\n                  'user'\n                );\n                AppLogger.info('Successfully analyzed and cached writing style');\n                return style;\n              } catch (cacheError) {\n                AppLogger.warn('Failed to cache writing style but analysis succeeded', cacheError);\n                return style; // Still return the analyzed style even if caching failed\n              }\n            }\n          } else {\n            AppLogger.info('No valid email bodies found for analysis');\n          }\n        } else {\n          AppLogger.info('No sent emails available for style analysis');\n        }\n      } catch (error) {\n        AppLogger.warn('Failed to analyze writing style from emails', error);\n        // Continue to default - don't fail\n      }\n    } else {\n      AppLogger.info('No API key configured, using default writing style');\n    }\n\n    // Step 3: ALWAYS return a default style (bulletproof fallback)\n    AppLogger.info('Using default writing style');\n    const defaultStyle = createDefaultWritingStyle();\n    \n    // Try to cache the default style for future use\n    try {\n      PropertyManager.setProperty(\n        Constants.PROPERTIES.WRITING_STYLE,\n        JSON.stringify(defaultStyle),\n        'user'\n      );\n    } catch (cacheError) {\n      AppLogger.warn('Failed to cache default writing style', cacheError);\n      // Continue - not critical\n    }\n    \n    return defaultStyle;\n  }\n\n  /**\n   * Improve user profile from thread with JSON mode\n   */\n  export function improveProfileFromThread(\n    currentProfile: Types.UserProfile,\n    threadContent: string,\n    apiKey: string\n  ): Types.UserProfile | null {\n    try {\n      const prompt = Prompts.getStyleImprovementPrompt(currentProfile, threadContent);\n      \n      // Use simple schema generation\n      const responseSchema = JsonValidator.createUserProfileSchema();\n      \n      const response = callGeminiAPI(prompt, apiKey, {\n        jsonMode: true,\n        responseSchema,\n        enableGrounding: true // Help with understanding context\n      });\n      \n      if (!response.success || !response.response) {\n        return null;\n      }\n      \n      // Parse and validate the response with error boundary\n      let parsed: unknown;\n      try {\n        parsed = JsonValidator.parseJson<any>(response.response, 'User Profile Improvement');\n        if (!parsed) {\n          throw new Error('Failed to parse JSON response');\n        }\n      } catch (parseError) {\n        AppLogger.error('Failed to parse profile improvement response', {\n          error: parseError,\n          responseText: response.response?.substring(0, 500)\n        });\n        return null;\n      }\n      \n      // Validate and return\n      return JsonValidator.validateUserProfile(parsed);\n    } catch (error) {\n      AppLogger.error('Profile improvement failed', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Validate Gemini API key format\n   */\n  export function validateApiKey(apiKey: string): { isValid: boolean; error?: string } {\n    if (!apiKey) {\n      return { isValid: false, error: 'API key is required' };\n    }\n    \n    if (typeof apiKey !== 'string') {\n      return { isValid: false, error: 'API key must be a string' };\n    }\n    \n    // Remove any whitespace\n    const trimmedKey = apiKey.trim();\n    \n    if (trimmedKey.length === 0) {\n      return { isValid: false, error: 'API key cannot be empty' };\n    }\n    \n    // Check if it's a masked key (from UI)\n    if (trimmedKey.startsWith(Constants.API.KEY_MASK)) {\n      return { isValid: false, error: 'Please enter a valid API key (not masked)' };\n    }\n    \n    // Validate Gemini API key format\n    // Google API keys typically start with 'AIza' and are ~39 characters\n    if (!trimmedKey.match(/^AIza[0-9A-Za-z\\-_]{35}$/)) {\n      return { isValid: false, error: 'Invalid API key format. Google Gemini API keys start with \"AIza\" and are 39 characters long.' };\n    }\n    \n    return { isValid: true };\n  }\n}"]}