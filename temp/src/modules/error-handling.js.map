{"version":3,"file":"error-handling.js","sourceRoot":"","sources":["../../../src/modules/error-handling.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAU,aAAa,CAwEtB;AAxED,WAAU,aAAa;IACrB;QAA8B,4BAAK;QACjC,kBACE,OAAe,EACR,IAAY,EACZ,WAAoB;YAE3B,YAAA,MAAK,YAAC,OAAO,CAAC,SAAC;YAHR,UAAI,GAAJ,IAAI,CAAQ;YACZ,iBAAW,GAAX,WAAW,CAAS;YAG3B,KAAI,CAAC,IAAI,GAAG,UAAU,CAAC;;QACzB,CAAC;QACH,eAAC;IAAD,CAAC,AATD,CAA8B,KAAK,GASlC;IATY,sBAAQ,WASpB,CAAA;IAED;;OAEG;IACH,SAAgB,WAAW,CAAC,KAAU;QACpC,SAAS,CAAC,KAAK,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;QAEzC,gDAAgD;QAChD,IAAI,WAAW,GAAG,8BAA8B,CAAC;QAEjD,IAAI,KAAK,YAAY,QAAQ,EAAE,CAAC;YAC9B,WAAW,GAAG,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,OAAO,CAAC;QACnD,CAAC;aAAM,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;YAClC,gDAAgD;YAChD,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;gBAClC,WAAW,GAAG,kEAAkE,CAAC;YACnF,CAAC;iBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;gBAC3C,WAAW,GAAG,+CAA+C,CAAC;YAChE,CAAC;QACH,CAAC;QAED,SAAS,CAAC,IAAI,CAAC,6BAA6B,EAAE,WAAW,CAAC,CAAC;QAE3D,iFAAiF;QACjF,IAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QACtC,OAAO,EAAE,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAtBe,yBAAW,cAsB1B,CAAA;IAED;;OAEG;IACH,SAAgB,iBAAiB,CAC/B,EAAK,EACL,aAAkB;QAElB,OAAO,CAAC;YAAC,cAAsB;iBAAtB,UAAsB,EAAtB,qBAAsB,EAAtB,IAAsB;gBAAtB,yBAAsB;;YAC7B,IAAI,CAAC;gBACH,OAAO,EAAE,wCAAI,IAAI,WAAE;YACrB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,SAAS,CAAC,KAAK,CAAC,mBAAY,EAAE,CAAC,IAAI,CAAE,EAAE,KAAK,CAAC,CAAC;gBAC9C,OAAO,aAAa,CAAC;YACvB,CAAC;QACH,CAAC,CAAM,CAAC;IACV,CAAC;IAZe,+BAAiB,oBAYhC,CAAA;IAED;;OAEG;IACH,SAAgB,gBAAgB,CAC9B,IAAS,EACT,MAAgB;QAEhB,IAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,IAAI,CAAC,KAAK,CAAC,EAAZ,CAAY,CAAC,CAAC;QACrD,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACvB,MAAM,IAAI,QAAQ,CAChB,mCAA4B,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAE,EAChD,kBAAkB,EAClB,oCAAoC,CACrC,CAAC;QACJ,CAAC;IACH,CAAC;IAZe,8BAAgB,mBAY/B,CAAA;AACH,CAAC,EAxES,aAAa,KAAb,aAAa,QAwEtB","sourcesContent":["namespace ErrorHandling {\n  export class AppError extends Error {\n    constructor(\n      message: string,\n      public code: string,\n      public userMessage?: string\n    ) {\n      super(message);\n      this.name = 'AppError';\n    }\n  }\n  \n  /**\n   * Handle errors and return appropriate response - show Settings card with error info\n   */\n  export function handleError(error: any): GoogleAppsScript.Card_Service.Card {\n    AppLogger.error('Error occurred', error);\n    \n    // Log user-friendly error message for debugging\n    let userMessage = 'An unexpected error occurred';\n    \n    if (error instanceof AppError) {\n      userMessage = error.userMessage || error.message;\n    } else if (error instanceof Error) {\n      // Don't expose internal error messages to users\n      if (error.message.includes('API')) {\n        userMessage = 'Failed to connect to AI service - Check your API key in Settings';\n      } else if (error.message.includes('Gmail')) {\n        userMessage = 'Failed to access email - Try refreshing Gmail';\n      }\n    }\n    \n    AppLogger.info('User-friendly error message', userMessage);\n    \n    // Return settings card - errors are handled via notifications in action handlers\n    const settings = Config.getSettings();\n    return UI.buildSettingsCard(settings);\n  }\n  \n  /**\n   * Wrap function with error handling\n   */\n  export function withErrorHandling<T extends (...args: any[]) => any>(\n    fn: T,\n    errorResponse: any\n  ): T {\n    return ((...args: Parameters<T>) => {\n      try {\n        return fn(...args);\n      } catch (error) {\n        AppLogger.error(`Error in ${fn.name}`, error);\n        return errorResponse;\n      }\n    }) as T;\n  }\n  \n  /**\n   * Validate required fields\n   */\n  export function validateRequired(\n    data: any,\n    fields: string[]\n  ): void {\n    const missing = fields.filter(field => !data[field]);\n    if (missing.length > 0) {\n      throw new AppError(\n        `Missing required fields: ${missing.join(', ')}`,\n        'VALIDATION_ERROR',\n        'Please fill in all required fields'\n      );\n    }\n  }\n}"]}