{"version":3,"file":"user-profile.js","sourceRoot":"","sources":["../../../src/modules/user-profile.ts"],"names":[],"mappings":"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","sourcesContent":["namespace UserProfile {\n  export interface Profile {\n    email: string;\n    name?: string;\n    identity: {\n      role: string;\n      expertise: string[];\n      communicationStyle: string;\n    };\n    personality: {\n      formality: number;\n      directness: number;\n      warmth: number;\n      detailLevel: number;\n    };\n    patterns: {\n      greetings: {\n        formal: string[];\n        casual: string[];\n        client: string[];\n      };\n      closings: {\n        formal: string[];\n        casual: string[];\n        client: string[];\n      };\n    };\n    vocabulary: {\n      common: string[];\n      avoided: string[];\n      professional: string[];\n    };\n    rules: string[];\n    lastUpdated: string;\n  }\n\n  /**\n   * Get or create user profile\n   */\n  export function getUserProfile(): Profile {\n    const cached = Config.getProperty(Constants.PROPERTIES.USER_PROFILE);\n    if (cached) {\n      try {\n        return JSON.parse(cached);\n      } catch (_e) {\n        AppLogger.warn('Failed to parse cached profile', _e);\n      }\n    }\n    \n    // Create initial profile\n    const userEmail = Session.getActiveUser().getEmail();\n    const userName = getUserName();\n    \n    return createInitialProfile(userEmail, userName);\n  }\n\n  /**\n   * Create initial profile for new user\n   */\n  function createInitialProfile(email: string, name?: string): Profile {\n    return {\n      email,\n      name,\n      identity: {\n        role: 'Professional',\n        expertise: [],\n        communicationStyle: 'Clear and professional'\n      },\n      personality: {\n        formality: Constants.STYLE.FORMALITY_NEUTRAL,\n        directness: 3,\n        warmth: 3,\n        detailLevel: 3\n      },\n      patterns: {\n        greetings: {\n          formal: Constants.STYLE.DEFAULT_GREETINGS,\n          casual: Constants.STYLE.DEFAULT_GREETINGS,\n          client: ['Dear', 'Hello']\n        },\n        closings: {\n          formal: ['Best regards', 'Sincerely'],\n          casual: Constants.STYLE.DEFAULT_CLOSINGS,\n          client: ['Best regards', 'Kind regards']\n        }\n      },\n      vocabulary: {\n        common: [],\n        avoided: [],\n        professional: []\n      },\n      rules: [\n        'Maintain professional tone',\n        'Be clear and concise',\n        'Respond promptly and helpfully'\n      ],\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Update user profile with new insights\n   */\n  export function updateProfile(updates: Partial<Profile>): void {\n    const current = getUserProfile();\n    const updated = {\n      ...current,\n      ...updates,\n      lastUpdated: new Date().toISOString()\n    };\n    \n    Config.setProperty(Constants.PROPERTIES.USER_PROFILE, JSON.stringify(updated));\n    AppLogger.info('User profile updated');\n  }\n\n  /**\n   * Learn from analyzed emails (called by AI module to avoid circular dep)\n   */\n  export function updateFromAnalysis(analysisResult: any): Profile {\n    try {\n      const current = getUserProfile();\n      \n      // Merge learned patterns with current profile\n      const merged: Profile = {\n        ...current,\n        identity: analysisResult.identity || current.identity,\n        personality: analysisResult.personality || current.personality,\n        patterns: mergePatterns(current.patterns, analysisResult.patterns),\n        vocabulary: mergeVocabulary(current.vocabulary, analysisResult.vocabulary),\n        rules: [...new Set([...current.rules, ...(analysisResult.rules || [])])],\n        lastUpdated: new Date().toISOString()\n      };\n      \n      updateProfile(merged);\n      return merged;\n    } catch (_e) {\n      AppLogger.error('Failed to update from analysis', _e);\n      return getUserProfile();\n    }\n  }\n\n  /**\n   * Improve profile from a specific thread (returns prompt for AI module)\n   */\n  export function getImprovementPrompt(thread: GoogleAppsScript.Gmail.GmailThread): string {\n    const current = getUserProfile();\n    const threadContent = extractThreadContent(thread);\n    return Prompts.getStyleImprovementPrompt(current, threadContent);\n  }\n  \n  /**\n   * Apply improvements from AI analysis\n   */\n  export function applyImprovements(improvedData: any): Profile {\n    try {\n      updateProfile(improvedData);\n      return improvedData;\n    } catch (_e) {\n      AppLogger.error('Failed to apply improvements', _e);\n      return getUserProfile();\n    }\n  }\n\n  /**\n   * Extract thread content for analysis\n   */\n  function extractThreadContent(thread: GoogleAppsScript.Gmail.GmailThread): string {\n    const messages = thread.getMessages();\n    const userEmail = Session.getActiveUser().getEmail();\n    \n    return messages.map(msg => {\n      const isFromMe = msg.getFrom().toLowerCase().includes(userEmail.toLowerCase());\n      return `From: ${msg.getFrom()} ${isFromMe ? '(ME)' : ''}\nDate: ${msg.getDate()}\n${Utils.cleanEmailBody(msg.getPlainBody())}`;\n    }).join('\\n\\n---\\n\\n');\n  }\n\n  /**\n   * Helper to merge pattern objects\n   */\n  function mergePatterns(current: any, learned: any): any {\n    if (!learned) {\n      return current;\n    }\n    \n    return {\n      greetings: {\n        formal: mergeArrays(current.greetings.formal, learned.greetings?.formal),\n        casual: mergeArrays(current.greetings.casual, learned.greetings?.casual),\n        client: mergeArrays(current.greetings.client, learned.greetings?.client)\n      },\n      closings: {\n        formal: mergeArrays(current.closings.formal, learned.closings?.formal),\n        casual: mergeArrays(current.closings.casual, learned.closings?.casual),\n        client: mergeArrays(current.closings.client, learned.closings?.client)\n      }\n    };\n  }\n\n  /**\n   * Helper to merge vocabulary objects\n   */\n  function mergeVocabulary(current: any, learned: any): any {\n    if (!learned) {\n      return current;\n    }\n    \n    return {\n      common: mergeArrays(current.common, learned.common),\n      avoided: mergeArrays(current.avoided, learned.avoided),\n      professional: mergeArrays(current.professional, learned.professional)\n    };\n  }\n\n  /**\n   * Merge arrays keeping unique values\n   */\n  function mergeArrays(current: string[], learned?: string[]): string[] {\n    if (!learned) {\n      return current;\n    }\n    return [...new Set([...learned, ...current])].slice(0, 10);\n  }\n\n  /**\n   * Get user's name from contacts or email\n   */\n  function getUserName(): string | undefined {\n    try {\n      // Try to get from contacts\n      const userEmail = Session.getActiveUser().getEmail();\n      // For now, extract from email\n      const namePart = userEmail.split('@')[0];\n      if (!namePart) {\n        return undefined;\n      }\n      \n      return namePart.split('.').map(part => \n        part.charAt(0).toUpperCase() + part.slice(1)\n      ).join(' ');\n    } catch {\n      // Error parsing email - return undefined\n      return undefined;\n    }\n  }\n}"]}