{"version":3,"file":"response-generator.js","sourceRoot":"","sources":["../../../src/modules/response-generator.ts"],"names":[],"mappings":"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","sourcesContent":["namespace ResponseGenerator {\n  /**\n   * Generate email response using style and context\n   */\n  export function generateResponse(\n    context: Types.EmailContext,\n    style: Types.WritingStyle,\n    settings: Types.Config\n  ): string {\n    // Build the prompt\n    const prompt = buildPrompt(context, style, settings);\n    \n    // Call Gemini API\n    const response = AI.callGeminiAPI(prompt, settings.apiKey);\n    \n    if (!response.success || !response.response) {\n      throw new ErrorHandling.AppError(\n        'Failed to generate response',\n        'AI_GENERATION_ERROR',\n        response.error || 'Could not generate response'\n      );\n    }\n    \n    // Post-process the response\n    let processedResponse = response.response;\n    \n    // Ensure proper formatting\n    processedResponse = formatResponse(processedResponse, style, settings);\n    \n    return processedResponse;\n  }\n  \n  /**\n   * Build the prompt for Gemini\n   */\n  function buildPrompt(\n    context: Types.EmailContext,\n    style: Types.WritingStyle,\n    settings: Types.Config\n  ): string {\n    const lengthGuide = getLengthGuide(settings.responseLength);\n    \n    let prompt = `You are writing an email response as Franz Enzenhofer.\n\nWriting Style Profile:\n- Typical greetings: ${style.greetings.join(', ')}\n- Typical closings: ${style.closings.join(', ')}\n- Formality level: ${settings.formalityLevel}/5\n- Average sentence length: ${style.averageSentenceLength} characters\n- Punctuation style: ${style.punctuationStyle}\n\nEmail to respond to:\nFrom: ${context.from}\nSubject: ${context.subject}\nDate: ${Utils.formatDate(context.date)}\nContent: ${context.body}\n\n`;\n\n    // Add thread context if available\n    if (context.isReply && context.previousMessages && context.previousMessages.length > 0) {\n      prompt += 'Previous messages in thread:\\n';\n      context.previousMessages.slice(-3).forEach(msg => {\n        prompt += `---\\n${msg.from} (${Utils.formatDate(msg.date)}): ${Utils.truncate(msg.body, 200)}\\n`;\n      });\n      prompt += '\\n';\n    }\n\n    prompt += `Instructions:\n1. Write a ${lengthGuide} response\n2. Match the writing style from the profile\n3. Use an appropriate greeting from the style profile\n4. Maintain formality level ${settings.formalityLevel}/5\n5. Be helpful and address all points raised\n6. Sound natural and personal\n`;\n\n    if (settings.customInstructions) {\n      prompt += `\\nAdditional instructions: ${settings.customInstructions}\\n`;\n    }\n\n    prompt += '\\nGenerate only the email body text, no subject or metadata:';\n    \n    return prompt;\n  }\n  \n  /**\n   * Get length guide based on preference\n   */\n  function getLengthGuide(length: Types.ResponseLength): string {\n    switch (length) {\n    case Types.ResponseLength.SHORT:\n      return 'brief (1-3 sentences)';\n    case Types.ResponseLength.MEDIUM:\n      return 'moderate (3-5 sentences)';\n    case Types.ResponseLength.LONG:\n      return 'detailed (1-2 paragraphs)';\n    default:\n      return 'moderate';\n    }\n  }\n  \n  /**\n   * Format the response with signature\n   */\n  function formatResponse(\n    response: string,\n    style: Types.WritingStyle,\n    settings: Types.Config\n  ): string {\n    // Trim whitespace\n    response = response.trim();\n    \n    // Add signature if not already present and configured\n    if (settings.signature && !response.includes(settings.signature)) {\n      // Check if response already has a closing\n      const hasClosing = style.closings.some(closing => \n        response.toLowerCase().includes(closing.toLowerCase())\n      );\n      \n      if (!hasClosing) {\n        response += `\\n\\n${  style.closings[0]}` || 'Best regards';\n      }\n      \n      response += `\\n${  settings.signature}`;\n    }\n    \n    return response;\n  }\n}"]}