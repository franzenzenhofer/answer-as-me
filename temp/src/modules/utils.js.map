{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/modules/utils.ts"],"names":[],"mappings":"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","sourcesContent":["namespace Utils {\n  /**\n   * Validate email address format\n   */\n  export function isValidEmail(email: string): boolean {\n    return Constants.PATTERNS.EMAIL_ADDRESS.test(email);\n  }\n  \n  /**\n   * Truncate text to specified length\n   */\n  export function truncate(text: string, maxLength: number): string {\n    if (text.length <= maxLength) {\n      return text;\n    }\n    return `${text.substring(0, maxLength - Constants.STYLE.MIN_SENTENCE_LENGTH)  }...`;\n  }\n  \n  /**\n   * Extract email domain\n   */\n  export function getEmailDomain(email: string): string {\n    const parts = email.split('@');\n    return parts.length === 2 ? parts[1]! : '';\n  }\n  \n  /**\n   * Format date for display\n   */\n  export function formatDate(date: Date | GoogleAppsScript.Base.Date): string {\n    return Utilities.formatDate(date as any, Session.getScriptTimeZone(), 'MMM dd, yyyy HH:mm');\n  }\n  \n  /**\n   * Parse JSON safely\n   */\n  export function parseJsonSafe<T>(json: string, defaultValue: T): T {\n    try {\n      return JSON.parse(json) as T;\n    } catch (_e) {\n      AppLogger.warn('Failed to parse JSON', _e as Error);\n      return defaultValue;\n    }\n  }\n  \n  /**\n   * Clean email body text\n   */\n  export function cleanEmailBody(body: string): string {\n    if (!body || typeof body !== 'string') {\n      return '';\n    }\n    \n    // First sanitize for security\n    let cleaned = sanitizeEmailContent(body);\n    \n    // Remove excessive whitespace\n    cleaned = cleaned.replace(Constants.PATTERNS.MULTIPLE_SPACES, ' ').trim();\n    \n    // Remove email signatures (simple heuristic)\n    const signaturePatterns = [\n      /--\\s*\\n[\\s\\S]*/,  // Replaced .* with [\\s\\S]* to match across lines\n      /Sent from my.*/i,\n      /Get Outlook for.*/i,\n      /^Best.*?\\n.*$/gm\n    ];\n    \n    signaturePatterns.forEach(pattern => {\n      cleaned = cleaned.replace(pattern, '').trim();\n    });\n    \n    return cleaned;\n  }\n  \n  /**\n   * Extract sender name from email\n   */\n  export function extractSenderName(fromHeader: string): string {\n    // Format: \"Name <email@example.com>\" or just \"email@example.com\"\n    const match = fromHeader.match(/^\"?([^\"<]+)\"?\\s*<?/);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n    \n    // If no name, use part before @ from email\n    const emailMatch = fromHeader.match(/([^@]+)@/);\n    return emailMatch ? emailMatch[1]! : 'Unknown';\n  }\n  \n  /**\n   * Generate a unique ID\n   */\n  export function generateId(): string {\n    return Utilities.getUuid();\n  }\n  \n  /**\n   * Sleep for specified milliseconds\n   */\n  export function sleep(ms: number): void {\n    Utilities.sleep(ms);\n  }\n  \n  /**\n   * Chunk array into smaller arrays\n   */\n  export function chunk<T>(array: T[], size: number): T[][] {\n    const chunks: T[][] = [];\n    for (let i = 0; i < array.length; i += size) {\n      chunks.push(array.slice(i, i + size));\n    }\n    return chunks;\n  }\n  \n  /**\n   * Retry a function with exponential backoff (synchronous for Google Apps Script)\n   */\n  export function retryWithBackoff<T>(\n    fn: () => T,\n    maxRetries: number = 3,\n    initialDelay: number = 1000\n  ): T {\n    let lastError: Error | undefined;\n    \n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        return fn();\n      } catch (error) {\n        lastError = error as Error;\n        const errorMessage = lastError.message.toLowerCase();\n        \n        // Check if error is retryable\n        const isRetryable = errorMessage.includes('timeout') ||\n                          errorMessage.includes('timed out') ||\n                          errorMessage.includes('network') ||\n                          errorMessage.includes('temporarily') ||\n                          errorMessage.includes('500') ||\n                          errorMessage.includes('502') ||\n                          errorMessage.includes('503') ||\n                          errorMessage.includes('504');\n        \n        if (!isRetryable) {\n          throw error; // Don't retry non-network errors\n        }\n        \n        if (i < maxRetries - 1) {\n          const delay = Math.min(initialDelay * Math.pow(2, i), 10000); // Max 10 seconds\n          AppLogger.info(`Retry ${i + 1}/${maxRetries} after ${delay}ms`, {\n            error: errorMessage\n          });\n          sleep(delay);\n        }\n      }\n    }\n    \n    throw lastError || new Error('Max retries exceeded');\n  }\n  \n  /**\n   * Escape HTML entities for XSS protection\n   */\n  export function escapeHtml(text: string): string {\n    if (!text || typeof text !== 'string') {\n      return '';\n    }\n    \n    const htmlEntities: { [key: string]: string } = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;',\n      '/': '&#x2F;',\n      '=': '&#x3D;',\n      '`': '&#x60;'\n    };\n    \n    return text.replace(/[&<>\"'\\/=`]/g, char => htmlEntities[char] || char);\n  }\n  \n  /**\n   * Sanitize email content for safe display\n   * Removes potentially dangerous content while preserving text\n   */\n  export function sanitizeEmailContent(content: string): string {\n    if (!content || typeof content !== 'string') {\n      return '';\n    }\n    \n    // Remove any script tags and their content\n    let sanitized = content.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\n    \n    // Remove any style tags to prevent CSS injection\n    sanitized = sanitized.replace(/<style\\b[^<]*(?:(?!<\\/style>)<[^<]*)*<\\/style>/gi, '');\n    \n    // Remove event handlers\n    sanitized = sanitized.replace(/\\s*on\\w+\\s*=\\s*[\"'][^\"']*[\"']/gi, '');\n    \n    // Remove javascript: protocol\n    sanitized = sanitized.replace(/javascript:/gi, '');\n    \n    // Remove data: URLs that could contain scripts\n    sanitized = sanitized.replace(/data:text\\/html[^,]*,/gi, '');\n    \n    return sanitized;\n  }\n  \n  /**\n   * Get relative time string\n   */\n  export function getRelativeTime(date: Date): string {\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n    \n    if (days > 0) {\n      return `${days} day${days > 1 ? 's' : ''} ago`;\n    }\n    if (hours > 0) {\n      return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n    }\n    if (minutes > 0) {\n      return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n    }\n    return 'just now';\n  }\n\n  /**\n   * Extract domain from email address\n   */\n  export function extractDomain(email: string): string {\n    const parts = email.split('@');\n    return parts.length > 1 && parts[1] ? parts[1].toLowerCase() : '';\n  }\n  \n  /**\n   * Execute URL fetch with timeout monitoring\n   */\n  export function fetchWithTimeout(\n    url: string,\n    options: GoogleAppsScript.URL_Fetch.URLFetchRequestOptions\n  ): GoogleAppsScript.URL_Fetch.HTTPResponse {\n    const startTime = new Date().getTime();\n    \n    try {\n      // Note: Google Apps Script doesn't support true timeouts\n      // We can only monitor how long the request takes\n      const response = UrlFetchApp.fetch(url, options);\n      \n      const elapsedTime = new Date().getTime() - startTime;\n      if (elapsedTime > Constants.API.TIMEOUT_MS) {\n        AppLogger.warn('Request exceeded expected timeout', {\n          url,\n          elapsedMs: elapsedTime,\n          expectedTimeoutMs: Constants.API.TIMEOUT_MS\n        });\n      }\n      \n      return response;\n    } catch (error) {\n      const elapsedTime = new Date().getTime() - startTime;\n      AppLogger.error('Network request failed', {\n        url,\n        elapsedMs: elapsedTime,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      throw error;\n    }\n  }\n}"]}