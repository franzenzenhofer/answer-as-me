{"version":3,"file":"ui.js","sourceRoot":"","sources":["../../../src/modules/ui.ts"],"names":[],"mappings":"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","sourcesContent":["namespace UI {\n  /**\n   * Build the main card - Shows settings if API key not set, otherwise overview\n   */\n  export function buildMainCard(settings: Types.Config): GoogleAppsScript.Card_Service.Card {\n    // If no API key, show settings card\n    if (!settings.apiKey) {\n      return buildSettingsCard(settings);\n    }\n    \n    // Otherwise show overview card\n    return buildOverviewCard(settings);\n  }\n  \n  /**\n   * CARD 2: Overview Mode - Main dashboard\n   */\n  export function buildOverviewCard(settings: Types.Config): GoogleAppsScript.Card_Service.Card {\n    const card = CardService.newCardBuilder();\n    card.setHeader(\n      CardService.newCardHeader()\n        .setTitle('📧 Answer As Me')\n        .setSubtitle('Overview Dashboard')\n        .setImageStyle(CardService.ImageStyle.CIRCLE)\n        .setImageUrl(Constants.UI.ICON_MAIN)\n    );\n    \n    // System Status Dashboard\n    const statusSection = CardService.newCardSection()\n      .setHeader('<b>📊 System Status</b>');\n    \n    const hasStyle = PropertyManager.getProperty(Constants.PROPERTIES.WRITING_STYLE, 'user');\n    const promptsDocId = PropertyManager.getProperty(Constants.PROPERTIES.PROMPTS_DOC_ID, 'script');\n    \n    // Dashboard status text - clear and informative\n    const apiStatus = settings.apiKey ? '✅ Connected and Working' : '❌ Not Configured';\n    const styleStatus = hasStyle ? '✅ Analysis Complete' : '⏳ Will Learn from Your Emails';\n    const promptStatus = promptsDocId ? '✅ Documents Created' : '⏳ Will Create on First Use';\n    \n    const statusDashboard = CardService.newTextParagraph()\n      .setText(`\n<b>🔑 API Connection:</b> ${apiStatus}<br>\n<b>✍️ Writing Style:</b> ${styleStatus}<br>\n<b>📄 Prompt System:</b> ${promptStatus}<br>\n<br>\n<b>📧 Ready to Generate Responses:</b> ${settings.apiKey && hasStyle ? '✅ Yes' : '⚠️ Complete setup first'}\n      `);\n    \n    statusSection.addWidget(statusDashboard);\n    \n    card.addSection(statusSection);\n    \n    // Quick Actions Dashboard\n    const actionsSection = CardService.newCardSection()\n      .setHeader('<b>🚀 Quick Actions</b>');\n    \n    const dashboardInfo = CardService.newTextParagraph()\n      .setText(`\n<b>📧 To Generate Responses:</b> Open any email thread<br>\n<b>⚙️ To Configure:</b> Click Settings below<br>\n<b>📝 To Edit Prompts:</b> Click Prompts below<br>\n<b>🧪 To Test API:</b> Go to Settings and click \"Test API Key\"\n      `);\n    \n    actionsSection.addWidget(dashboardInfo);\n    \n    // Quick access grid\n    const quickActions = CardService.newButtonSet()\n      .addButton(\n        CardService.newTextButton()\n          .setText('⚙️ Settings')\n          .setOnClickAction(\n            CardService.newAction()\n              .setFunctionName('onSettings')\n          )\n      )\n      .addButton(\n        CardService.newTextButton()\n          .setText('📝 Prompts')\n          .setOnClickAction(\n            CardService.newAction()\n              .setFunctionName('onPromptEditor')\n          )\n      )\n      .addButton(\n        CardService.newTextButton()\n          .setText('❓ Help')\n          .setOnClickAction(\n            CardService.newAction()\n              .setFunctionName('onHelp')\n          )\n      );\n    \n    actionsSection.addWidget(quickActions);\n    \n    card.addSection(actionsSection);\n    \n    // Recent activity or tips\n    const tipsSection = CardService.newCardSection()\n      .setHeader('<b>💡 Tips</b>');\n    \n    const tipsText = CardService.newTextParagraph()\n      .setText(\n        '• <b>Open any email</b> and click \"Generate Response\"<br>' +\n        '• <b>Customize prompts</b> in Google Docs for better results<br>' +\n        '• <b>Style analysis</b> improves with more sent emails<br>' +\n        '• <b>All drafts</b> are saved - review before sending!'\n      );\n    \n    tipsSection.addWidget(tipsText);\n    card.addSection(tipsSection);\n    \n    return card.build();\n  }\n\n  /**\n   * CARD 3: Thread Mode - Email-specific context\n   */\n  export function buildThreadCard(\n    settings: Types.Config,\n    emailContext?: any\n  ): GoogleAppsScript.Card_Service.Card {\n    const card = CardService.newCardBuilder();\n    card.setHeader(\n      CardService.newCardHeader()\n        .setTitle('📬 Thread Context')\n        .setSubtitle('AI response for this email')\n        .setImageStyle(CardService.ImageStyle.CIRCLE)\n        .setImageUrl(Constants.UI.ICON_MAIN)\n    );\n    \n    // Check API key first\n    if (!settings.apiKey) {\n      const setupSection = CardService.newCardSection();\n      setupSection.addWidget(\n        CardService.newTextParagraph()\n          .setText('⚠️ <b>API Key Required</b><br><br>Click Settings to add your API key.')\n      );\n      \n      const settingsButton = CardService.newTextButton()\n        .setText('Go to Settings')\n        .setOnClickAction(\n          CardService.newAction()\n            .setFunctionName('onSettings')\n        )\n        .setTextButtonStyle(CardService.TextButtonStyle.FILLED);\n      setupSection.addWidget(settingsButton);\n      \n      card.addSection(setupSection);\n      return card.build();\n    }\n    \n    // Email context info\n    if (emailContext) {\n      const contextSection = CardService.newCardSection()\n        .setHeader('<b>📧 Current Email</b>');\n      \n      const emailInfo = CardService.newDecoratedText()\n        .setText(emailContext.subject || 'No Subject')\n        .setTopLabel('Subject')\n        .setBottomLabel(`From: ${emailContext.sender || 'Unknown'}`)\n        .setIcon(CardService.Icon.EMAIL);\n      \n      contextSection.addWidget(emailInfo);\n      card.addSection(contextSection);\n    }\n    \n    // Main generate button\n    const generateSection = CardService.newCardSection()\n      .setHeader('<b>🎯 AI Response</b>');\n    \n    const generateButton = CardService.newTextButton()\n      .setText('Generate Personalized Reply')\n      .setTextButtonStyle(CardService.TextButtonStyle.FILLED)\n      .setOnClickAction(\n        CardService.newAction()\n          .setFunctionName('generateResponse')\n      );\n    \n    generateSection.addWidget(generateButton);\n    \n    // Quick formality adjustment\n    const formalitySection = CardService.newCardSection()\n      .setHeader('<b>🎭 Quick Adjustments</b>');\n    \n    const formalityButtons = CardService.newButtonSet()\n      .addButton(\n        CardService.newTextButton()\n          .setText('😊 Casual')\n          .setOnClickAction(\n            CardService.newAction()\n              .setFunctionName('generateResponseWithFormality')\n              .setParameters({ formality: '1' })\n          )\n      )\n      .addButton(\n        CardService.newTextButton()\n          .setText('💼 Formal')\n          .setOnClickAction(\n            CardService.newAction()\n              .setFunctionName('generateResponseWithFormality')\n              .setParameters({ formality: '5' })\n          )\n      )\n      .addButton(\n        CardService.newTextButton()\n          .setText('🔄 Auto')\n          .setOnClickAction(\n            CardService.newAction()\n              .setFunctionName('generateResponse')\n          )\n      );\n    \n    formalitySection.addWidget(formalityButtons);\n    \n    card.addSection(generateSection);\n    card.addSection(formalitySection);\n    \n    // Navigation to other cards\n    const navSection = CardService.newCardSection();\n    \n    const navButtons = CardService.newButtonSet()\n      .addButton(\n        CardService.newTextButton()\n          .setText('📊 Overview')\n          .setOnClickAction(\n            CardService.newAction()\n              .setFunctionName('onHomepage')\n          )\n      )\n      .addButton(\n        CardService.newTextButton()\n          .setText('⚙️ Settings')\n          .setOnClickAction(\n            CardService.newAction()\n              .setFunctionName('onSettings')\n          )\n      );\n    \n    navSection.addWidget(navButtons);\n    card.addSection(navSection);\n    \n    return card.build();\n  }\n\n  \n  /**\n   * Build response preview card\n   */\n  export function buildResponseCard(\n    responseText: string,\n    _draftId?: string\n  ): GoogleAppsScript.Card_Service.Card {\n    const card = CardService.newCardBuilder();\n    \n    const header = CardService.newCardHeader()\n      .setTitle(Constants.UI.TITLE_RESPONSE)\n      .setSubtitle(Constants.UI.MSG_RESPONSE_GENERATED);\n    \n    card.setHeader(header);\n    \n    const section = CardService.newCardSection();\n    \n    // Response preview\n    const previewText = CardService.newTextParagraph()\n      .setText(`<b>Preview:</b><br>${  Utils.truncate(Utils.escapeHtml(responseText), Constants.UI.MAX_HINT_LENGTH * 2)}`);\n    section.addWidget(previewText);\n    \n    // Open draft button\n    const openButton = CardService.newTextButton()\n      .setText('Open Draft in Gmail')\n      .setOpenLink(\n        CardService.newOpenLink()\n          .setUrl('https://mail.google.com/mail/u/0/#drafts')\n          .setOpenAs(CardService.OpenAs.FULL_SIZE)\n      );\n    \n    const buttonSet = CardService.newButtonSet()\n      .addButton(openButton);\n    \n    section.addWidget(buttonSet);\n    card.addSection(section);\n    \n    return card.build();\n  }\n  \n  \n  /**\n   * Show notification\n   */\n  export function showNotification(message: string): GoogleAppsScript.Card_Service.ActionResponse {\n    return CardService.newActionResponseBuilder()\n      .setNotification(\n        CardService.newNotification()\n          .setText(message)\n      )\n      .build();\n  }\n  \n  /**\n   * Build help card\n   */\n  export function buildHelpCard(): GoogleAppsScript.Card_Service.Card {\n    const card = CardService.newCardBuilder();\n    \n    const header = CardService.newCardHeader()\n      .setTitle(`${Constants.UI.TITLE_HELP} - ${Constants.METADATA.APP_NAME}`)\n      .setSubtitle('How to use this add-on');\n    \n    card.setHeader(header);\n    \n    const section = CardService.newCardSection();\n    \n    const helpText = CardService.newTextParagraph()\n      .setText(\n        '<b>Getting Started:</b><br>' +\n        '1. Enter your Gemini API key<br>' +\n        '2. Choose your response mode<br>' +\n        '3. Customize settings as needed<br>' +\n        '4. Click \"Generate Response\" on any email<br><br>' +\n        '<b>Response Modes:</b><br>' +\n        '• Draft: Creates draft replies<br>' +\n        '• Suggest: Shows inline suggestions<br>' +\n        '• Template: Uses pre-defined templates<br>' +\n        '• Auto: Sends automatically (use with caution!)<br><br>' +\n        '<b>Tips:</b><br>' +\n        '• The AI learns from your sent emails<br>' +\n        '• Adjust formality based on recipient<br>' +\n        '• Use custom instructions for specific needs'\n      );\n    \n    section.addWidget(helpText);\n    card.addSection(section);\n    \n    return card.build();\n  }\n\n\n  /**\n   * Show prompt update notification\n   */\n  export function showPromptUpdateNotification(\n    updated: string[], \n    failed: string[]\n  ): GoogleAppsScript.Card_Service.ActionResponse {\n    let message = '';\n    \n    if (updated.length > 0) {\n      const updatedNames = updated.map(type => \n        Constants.PROMPTS.DOC_NAMES[type] || type\n      ).join(', ');\n      message += `✅ Updated: ${updatedNames}`;\n    }\n    \n    if (failed.length > 0) {\n      const failedNames = failed.map(type => \n        Constants.PROMPTS.DOC_NAMES[type] || type\n      ).join(', ');\n      message += `\\n❌ Failed: ${failedNames}`;\n    }\n    \n    return CardService.newActionResponseBuilder()\n      .setNotification(\n        CardService.newNotification()\n          .setText(message || 'No updates needed')\n      )\n      .build();\n  }\n\n  /**\n   * CARD 1: Settings - ALL configuration in one place\n   */\n  export function buildSettingsCard(settings: Types.Config): GoogleAppsScript.Card_Service.Card {\n    const card = CardService.newCardBuilder();\n    card.setHeader(\n      CardService.newCardHeader()\n        .setTitle('⚙️ Settings')\n        .setSubtitle('All configuration in one place')\n        .setImageStyle(CardService.ImageStyle.SQUARE)\n        .setImageUrl(Constants.UI.ICON_MAIN)\n    );\n    \n    // API Key section - NEVER HIDE IT!\n    const apiSection = CardService.newCardSection()\n      .setHeader('<b>🔑 API Configuration</b>');\n    \n    const apiKeyInput = CardService.newTextInput()\n      .setFieldName('apiKey')\n      .setTitle('Gemini API Key')\n      .setValue(settings.apiKey || '')  // NEVER HIDE - show full key!\n      .setHint('Your Google Gemini API key - get one at makersuite.google.com');\n    \n    apiSection.addWidget(apiKeyInput);\n    \n    // API Key testing and help\n    const keyActions = CardService.newButtonSet();\n    \n    if (settings.apiKey) {\n      // Test API key button\n      const testButton = CardService.newTextButton()\n        .setText('🧪 Test API Key')\n        .setOnClickAction(\n          CardService.newAction()\n            .setFunctionName('testApiKey')\n        );\n      keyActions.addButton(testButton);\n    }\n    \n    const getKeyButton = CardService.newTextButton()\n      .setText(settings.apiKey ? '🔗 Get New Key' : '🔗 Get Free API Key')\n      .setOpenLink(\n        CardService.newOpenLink()\n          .setUrl('https://makersuite.google.com/app/apikey')\n          .setOpenAs(CardService.OpenAs.FULL_SIZE)\n      );\n    keyActions.addButton(getKeyButton);\n    \n    apiSection.addWidget(keyActions);\n    \n    card.addSection(apiSection);\n    \n    // Response Configuration\n    const responseSection = CardService.newCardSection()\n      .setHeader('<b>📝 Response Configuration</b>');\n    \n    // Formality level\n    const formalityDropdown = CardService.newSelectionInput()\n      .setFieldName('formalityLevel')\n      .setTitle('Default Formality')\n      .setType(CardService.SelectionInputType.DROPDOWN);\n    \n    Constants.STYLE.FORMALITY_LABELS.forEach((label, index) => {\n      formalityDropdown.addItem(label, (index + 1).toString(), \n        settings.formalityLevel === index + 1);\n    });\n    \n    responseSection.addWidget(formalityDropdown);\n    \n    // Response length\n    const lengthDropdown = CardService.newSelectionInput()\n      .setFieldName('responseLength')\n      .setTitle('Response Length')\n      .setType(CardService.SelectionInputType.DROPDOWN)\n      .addItem('Short (1-2 sentences)', 'short', settings.responseLength === 'short')\n      .addItem('Medium (3-5 sentences)', 'medium', settings.responseLength === 'medium')\n      .addItem('Long (6+ sentences)', 'long', settings.responseLength === 'long');\n    responseSection.addWidget(lengthDropdown);\n    \n    // Custom instructions\n    const instructionsInput = CardService.newTextInput()\n      .setFieldName('customInstructions')\n      .setTitle('Custom Instructions')\n      .setValue(settings.customInstructions || '')\n      .setHint('Special instructions for all responses')\n      .setMultiline(true);\n    \n    responseSection.addWidget(instructionsInput);\n    \n    // Signature\n    const signatureInput = CardService.newTextInput()\n      .setFieldName('signature')\n      .setTitle('Email Signature')\n      .setValue(settings.signature || '')\n      .setHint('Your email signature')\n      .setMultiline(true);\n    \n    responseSection.addWidget(signatureInput);\n    \n    card.addSection(responseSection);\n    \n    // KISS: Simplified 3-Prompt Management + Debug Logging\n    const promptsSection = CardService.newCardSection()\n      .setHeader('<b>📄 KISS Prompt Management - 3 Simple Cards</b>');\n    \n    // Auto-create documents immediately\n    try {\n      GoogleDocsPrompts.createAllPromptDocuments();\n    } catch (error) {\n      DebugLogger.logError('UI', error instanceof Error ? error : String(error), null, 'Failed to create prompt documents in UI');\n    }\n    \n    // Style Analysis Status\n    const hasStyle = PropertyManager.getProperty(Constants.PROPERTIES.WRITING_STYLE, 'user');\n    let styleInfo = 'Style: ⏳ Pending - Send emails to analyze';\n    \n    if (hasStyle) {\n      try {\n        const style = JSON.parse(hasStyle);\n        const formalityLabel = Constants.STYLE.FORMALITY_LABELS[style.formalityLevel - 1] || 'Neutral';\n        styleInfo = `Style: ✅ Analyzed (${formalityLabel}, ${style.greetings?.length || 0} greetings, ${style.closings?.length || 0} closings)`;\n      } catch {\n        styleInfo = 'Style: ✅ Analyzed (details available)';\n      }\n    }\n    \n    const styleText = CardService.newTextParagraph()\n      .setText(styleInfo);\n    promptsSection.addWidget(styleText);\n    \n    // Direct links to 3 prompt documents - KISS approach\n    const promptInfo = CardService.newTextParagraph()\n      .setText('Prompts: ✅ Ready - Click to edit in Google Docs');\n    promptsSection.addWidget(promptInfo);\n    \n    // KISS: Only 3 simple prompt editing buttons\n    const promptButtons = CardService.newButtonSet()\n      .addButton(\n        CardService.newTextButton()\n          .setText('⚙️ Settings')\n          .setOnClickAction(\n            CardService.newAction()\n              .setFunctionName('handleCreatePromptDoc')\n              .setParameters({ promptType: 'SETTINGS' })\n          )\n      )\n      .addButton(\n        CardService.newTextButton()\n          .setText('📊 Overview')\n          .setOnClickAction(\n            CardService.newAction()\n              .setFunctionName('handleCreatePromptDoc')\n              .setParameters({ promptType: 'OVERVIEW' })\n          )\n      )\n      .addButton(\n        CardService.newTextButton()\n          .setText('🧵 Thread')\n          .setOnClickAction(\n            CardService.newAction()\n              .setFunctionName('handleCreatePromptDoc')\n              .setParameters({ promptType: 'THREAD' })\n          )\n      );\n    \n    promptsSection.addWidget(promptButtons);\n    \n    card.addSection(promptsSection);\n    \n    // DEBUG LOGGING SECTION\n    const debugSection = CardService.newCardSection()\n      .setHeader('<b>🐛 Super Debug Logging</b>');\n    \n    try {\n      const debugSpreadsheetUrl = DebugLogger.getTodaysSpreadsheetUrl();\n      if (debugSpreadsheetUrl) {\n        const debugInfo = CardService.newTextParagraph()\n          .setText(`Debug Log: ✅ <a href=\"${debugSpreadsheetUrl}\">📊 Today's Debug Spreadsheet</a><br>All AI requests, responses, logic & errors logged automatically!`);\n        debugSection.addWidget(debugInfo);\n      } else {\n        const debugInfo = CardService.newTextParagraph()\n          .setText('Debug Log: ⚠️ Creating debug spreadsheet...');\n        debugSection.addWidget(debugInfo);\n      }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (_error) {\n      const debugInfo = CardService.newTextParagraph()\n        .setText('Debug Log: ❌ Error creating debug spreadsheet');\n      debugSection.addWidget(debugInfo);\n    }\n    \n    card.addSection(debugSection);\n    \n    // DANGER ZONE - Factory Reset\n    const dangerSection = CardService.newCardSection()\n      .setHeader('<b>🚨 Danger Zone</b>');\n    \n    const resetWarning = CardService.newTextParagraph()\n      .setText('⚠️ Factory reset will delete ALL data: API key, prompts, style analysis, settings. This cannot be undone!');\n    dangerSection.addWidget(resetWarning);\n    \n    const factoryResetButton = CardService.newTextButton()\n      .setText('🔴 FACTORY RESET')\n      .setTextButtonStyle(CardService.TextButtonStyle.FILLED)\n      .setOnClickAction(\n        CardService.newAction()\n          .setFunctionName('factoryReset')\n      );\n    \n    dangerSection.addWidget(factoryResetButton);\n    card.addSection(dangerSection);\n    \n    // Save button\n    const saveButton = CardService.newTextButton()\n      .setText('💾 Save All Settings')\n      .setTextButtonStyle(CardService.TextButtonStyle.FILLED)\n      .setOnClickAction(\n        CardService.newAction()\n          .setFunctionName('saveSettings')\n      );\n    \n    const buttonSection = CardService.newCardSection();\n    buttonSection.addWidget(saveButton);\n    card.addSection(buttonSection);\n    \n    return card.build();\n  }\n  \n  \n  \n}"]}