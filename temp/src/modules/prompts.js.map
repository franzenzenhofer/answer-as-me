{"version":3,"file":"prompts.js","sourceRoot":"","sources":["../../../src/modules/prompts.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Prompts Module - DRY Implementation\n * \n * ALL PROMPTS ARE FETCHED FROM GOOGLE DOCS\n * This module is just a thin wrapper around GoogleDocsPrompts\n * NO HARDCODED PROMPTS - Everything comes from Google Docs\n */\n\nnamespace Prompts {\n  /**\n   * KISS APPROACH - Only 3 main prompt functions\n   */\n  \n  /**\n   * Get settings/identity prompt (combines old ASSISTANT_IDENTITY)\n   */\n  export function getSettingsPrompt(userEmail: string, userName?: string): string {\n    DebugLogger.logLogic('getSettingsPrompt', 'START', { userEmail, userName });\n    \n    // Auto-create documents if they don't exist\n    ensurePromptsExist();\n    \n    const result = GoogleDocsPrompts.getPrompt(Constants.PROMPTS.TYPES.SETTINGS, {\n      userEmail,\n      userName: userName || userEmail\n    });\n    \n    DebugLogger.logLogic('getSettingsPrompt', 'COMPLETE', { userEmail }, { promptLength: result.length });\n    return result;\n  }\n\n  /**\n   * Get overview/response generation prompt (combines old RESPONSE_GENERATION)  \n   */\n  export function getOverviewPrompt(\n    context: Types.EmailContext,\n    style: Types.WritingStyle,\n    userProfile: Types.UserProfile,\n    instructions?: string\n  ): string {\n    DebugLogger.logLogic('getOverviewPrompt', 'START', { subject: context.subject, hasStyle: !!style });\n    \n    // Auto-create documents if they don't exist\n    ensurePromptsExist();\n    \n    // Build recipient info\n    const recipientInfo = buildRecipientInfo(context);\n    \n    // Build identity summary\n    const identity = buildIdentitySummary(userProfile);\n    \n    // Build style summary\n    const styleSummary = buildStyleSummary(style);\n    \n    // Build context summary\n    const contextSummary = buildContextSummary(context);\n    \n    const result = GoogleDocsPrompts.getPrompt(Constants.PROMPTS.TYPES.OVERVIEW, {\n      context: contextSummary,\n      identity,\n      style: styleSummary,\n      recipientInfo,\n      instructions: instructions || 'None',\n      userName: userProfile.name || userProfile.email\n    });\n    \n    DebugLogger.logLogic('getOverviewPrompt', 'COMPLETE', \n      { context: contextSummary.substring(0, 100) }, \n      { promptLength: result.length }\n    );\n    return result;\n  }\n\n  /**\n   * Get thread/learning prompt (combines old STYLE_ANALYSIS, STYLE_IMPROVEMENT, THREAD_LEARNING)\n   */\n  export function getThreadPrompt(\n    userEmail: string,\n    threadMessages?: string,\n    currentProfile?: Types.UserProfile,\n    threadContent?: string\n  ): string {\n    DebugLogger.logLogic('getThreadPrompt', 'START', { \n      userEmail, \n      hasThreadMessages: !!threadMessages,\n      hasProfile: !!currentProfile \n    });\n    \n    // Auto-create documents if they don't exist\n    ensurePromptsExist();\n    \n    const result = GoogleDocsPrompts.getPrompt(Constants.PROMPTS.TYPES.THREAD, {\n      userEmail,\n      threadMessages: threadMessages || '',\n      currentProfile: currentProfile ? JSON.stringify(currentProfile, null, 2) : '',\n      threadContent: threadContent || ''\n    });\n    \n    DebugLogger.logLogic('getThreadPrompt', 'COMPLETE', { userEmail }, { promptLength: result.length });\n    return result;\n  }\n\n  /**\n   * Ensure all prompt documents exist - creates them immediately if missing\n   */\n  function ensurePromptsExist(): void {\n    try {\n      // Check if any documents are missing and create them immediately\n      const promptTypes = Object.values(Constants.PROMPTS.TYPES);\n      let missingDocs = 0;\n      \n      for (const promptType of promptTypes) {\n        const docIdKey = `${Constants.PROMPTS.DOC_ID_PREFIX}${promptType}`;\n        const docId = PropertyManager.getProperty(docIdKey, 'user');\n        \n        if (!docId) {\n          missingDocs++;\n        }\n      }\n      \n      if (missingDocs > 0) {\n        DebugLogger.info('Prompts', `Creating ${missingDocs} missing prompt documents`);\n        GoogleDocsPrompts.createAllPromptDocuments();\n      }\n    } catch (error) {\n      DebugLogger.logError('Prompts', error instanceof Error ? error : String(error), null, 'Failed to ensure prompts exist - may use fallback prompts');\n    }\n  }\n\n  // Legacy compatibility functions - redirect to new simplified functions\n  \n  export function getAssistantIdentityPrompt(userEmail: string, userName?: string): string {\n    return getSettingsPrompt(userEmail, userName);\n  }\n\n  export function getResponseGenerationPrompt(\n    context: Types.EmailContext,\n    style: Types.WritingStyle,\n    userProfile: Types.UserProfile,\n    instructions?: string\n  ): string {\n    return getOverviewPrompt(context, style, userProfile, instructions);\n  }\n\n  export function getStyleAnalysisPrompt(userEmail: string): string {\n    return getThreadPrompt(userEmail);\n  }\n\n  export function getStyleImprovementPrompt(\n    currentProfile: Types.UserProfile,\n    threadContent: string\n  ): string {\n    return getThreadPrompt(currentProfile.email, undefined, currentProfile, threadContent);\n  }\n\n  export function getThreadLearningPrompt(\n    userEmail: string,\n    threadMessages: string\n  ): string {\n    return getThreadPrompt(userEmail, threadMessages);\n  }\n\n  export function getInitialProfilePrompt(userName: string, userEmail: string): string {\n    return getSettingsPrompt(userEmail, userName);\n  }\n\n  // Helper functions to build prompt variables\n  \n  function buildRecipientInfo(context: Types.EmailContext): string {\n    const recipient = context.recipients?.[0] || context.to;\n    const domain = recipient.split('@')[1];\n    const senderDomain = (context.senderEmail || context.from).split('@')[1];\n    \n    let relationship = 'External contact';\n    if (domain === senderDomain) {\n      relationship = 'Colleague (same organization)';\n    } else if (context.threadHistory && context.threadHistory.length > 2) {\n      relationship = 'Ongoing conversation';\n    }\n    \n    return `Recipient: ${recipient}\\nRelationship: ${relationship}`;\n  }\n\n  function buildIdentitySummary(profile: Types.UserProfile): string {\n    if (!profile.identity) {\n      return `Email user: ${profile.email}`;\n    }\n    \n    return `Role: ${profile.identity.role}\nExpertise: ${profile.identity.expertise.join(', ')}\nCommunication Style: ${profile.identity.communicationStyle}`;\n  }\n\n  function buildStyleSummary(style: Types.WritingStyle): string {\n    const formalityLabel = Constants.STYLE.FORMALITY_LABELS[style.formalityLevel - 1] || 'Neutral';\n    \n    return `Formality: ${formalityLabel}\nCommon Greetings: ${style.greetings.slice(0, 3).join(', ')}\nCommon Closings: ${style.closings.slice(0, 3).join(', ')}\nAvg Sentence Length: ${style.averageSentenceLength} words\nEmail Length: ${style.emailLength}`;\n  }\n\n  function buildContextSummary(context: Types.EmailContext): string {\n    const lastMessage = context.originalMessage || { body: context.body };\n    const preview = lastMessage.body.substring(0, 500);\n    \n    return `Subject: ${context.subject}\nFrom: ${context.senderName || context.from} <${context.senderEmail || context.from}>\nPreview: ${preview}${lastMessage.body.length > 500 ? '...' : ''}`;\n  }\n\n  /**\n   * Helper function to infer relationship type\n   * (Still used by other modules)\n   */\n  export function inferRelationship(context: Types.EmailContext, userProfile: Types.UserProfile): string {\n    const senderEmail = (context.senderEmail || context.from).toLowerCase();\n    const senderDomain = Utils.extractDomain(senderEmail);\n    const userDomain = Utils.extractDomain(userProfile.email);\n    \n    // Check previous interactions\n    if (context.threadHistory && context.threadHistory.length > 5) {\n      return 'Frequent correspondent';\n    }\n    \n    // Same domain = colleague\n    if (senderDomain === userDomain) {\n      return 'Colleague';\n    }\n    \n    // Check for client indicators\n    const subject = context.subject.toLowerCase();\n    if (subject.includes('proposal') || \n        subject.includes('contract') ||\n        subject.includes('invoice')) {\n      return 'Client';\n    }\n    \n    return 'External contact';\n  }\n\n  /**\n   * Helper function to determine formality level\n   * (Still used by other modules)\n   */\n  export function inferFormalityLevel(context: Types.EmailContext, userProfile: Types.UserProfile): string {\n    const relationship = inferRelationship(context, userProfile);\n    \n    switch (relationship) {\n    case 'Colleague':\n      return 'Casual to Neutral';\n    case 'Client':\n      return 'Professional';\n    case 'Frequent correspondent':\n      return 'Established pattern';\n    default:\n      return 'Neutral to Formal';\n    }\n  }\n}"]}