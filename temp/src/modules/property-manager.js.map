{"version":3,"file":"property-manager.js","sourceRoot":"","sources":["../../../src/modules/property-manager.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Thread-safe Property Manager\n * Handles concurrent access to Google Apps Script Properties Service\n * Prevents race conditions and data corruption\n */\n\nnamespace PropertyManager {\n  \n  // Lock mechanism using script properties\n  const LOCK_PREFIX = 'LOCK_';\n  const LOCK_TIMEOUT_MS = 5000; // 5 seconds\n  const MAX_RETRIES = 3;\n  const RETRY_DELAY_MS = 100;\n  \n  /**\n   * Acquire a lock for a specific key\n   */\n  function acquireLock(key: string, timeout: number = LOCK_TIMEOUT_MS): boolean {\n    const lockKey = `${LOCK_PREFIX}${key}`;\n    const lockValue = Utilities.getUuid();\n    const expirationTime = new Date().getTime() + timeout;\n    \n    try {\n      const properties = PropertiesService.getScriptProperties();\n      const currentLock = properties.getProperty(lockKey);\n      \n      if (currentLock) {\n        // Check if lock is expired\n        const lockData = Utils.parseJsonSafe<{expires: number; id: string}>(\n          currentLock, \n          { expires: 0, id: '' }\n        );\n        \n        if (lockData.expires > new Date().getTime()) {\n          return false; // Lock is still valid\n        }\n      }\n      \n      // Try to acquire lock\n      properties.setProperty(lockKey, JSON.stringify({\n        expires: expirationTime,\n        id: lockValue\n      }));\n      \n      // Verify we got the lock (in case of race condition)\n      Utilities.sleep(10); // Small delay to ensure write is complete\n      const verifyLock = properties.getProperty(lockKey);\n      if (verifyLock) {\n        const verifyData = Utils.parseJsonSafe<{id: string}>(verifyLock, { id: '' });\n        return verifyData.id === lockValue;\n      }\n      \n      return false;\n    } catch (error) {\n      AppLogger.error('Failed to acquire lock', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Release a lock\n   */\n  function releaseLock(key: string): void {\n    const lockKey = `${LOCK_PREFIX}${key}`;\n    try {\n      PropertiesService.getScriptProperties().deleteProperty(lockKey);\n    } catch (error) {\n      AppLogger.warn('Failed to release lock', error);\n    }\n  }\n  \n  /**\n   * Get property with thread safety\n   */\n  export function getProperty(key: string, service: 'script' | 'user' = 'script'): string | null {\n    let retries = 0;\n    \n    while (retries < MAX_RETRIES) {\n      if (acquireLock(key)) {\n        try {\n          const properties = service === 'script' \n            ? PropertiesService.getScriptProperties()\n            : PropertiesService.getUserProperties();\n          \n          return properties.getProperty(key);\n        } finally {\n          releaseLock(key);\n        }\n      }\n      \n      retries++;\n      if (retries < MAX_RETRIES) {\n        Utilities.sleep(RETRY_DELAY_MS * retries);\n      }\n    }\n    \n    // Fallback: read without lock if all retries failed\n    AppLogger.warn(`Failed to acquire lock for property: ${key}, reading without lock`);\n    const properties = service === 'script' \n      ? PropertiesService.getScriptProperties()\n      : PropertiesService.getUserProperties();\n    return properties.getProperty(key);\n  }\n  \n  /**\n   * Set property with thread safety\n   */\n  export function setProperty(key: string, value: string, service: 'script' | 'user' = 'script'): boolean {\n    let retries = 0;\n    \n    while (retries < MAX_RETRIES) {\n      if (acquireLock(key)) {\n        try {\n          const properties = service === 'script' \n            ? PropertiesService.getScriptProperties()\n            : PropertiesService.getUserProperties();\n          \n          properties.setProperty(key, value);\n          return true;\n        } catch (error) {\n          AppLogger.error(`Failed to set property: ${key}`, error);\n          return false;\n        } finally {\n          releaseLock(key);\n        }\n      }\n      \n      retries++;\n      if (retries < MAX_RETRIES) {\n        Utilities.sleep(RETRY_DELAY_MS * retries);\n      }\n    }\n    \n    AppLogger.error(`Failed to acquire lock for property: ${key} after ${MAX_RETRIES} retries`);\n    return false;\n  }\n  \n  /**\n   * Delete property with thread safety\n   */\n  export function deleteProperty(key: string, service: 'script' | 'user' = 'script'): boolean {\n    let retries = 0;\n    \n    while (retries < MAX_RETRIES) {\n      if (acquireLock(key)) {\n        try {\n          const properties = service === 'script' \n            ? PropertiesService.getScriptProperties()\n            : PropertiesService.getUserProperties();\n          \n          properties.deleteProperty(key);\n          return true;\n        } catch (error) {\n          AppLogger.error(`Failed to delete property: ${key}`, error);\n          return false;\n        } finally {\n          releaseLock(key);\n        }\n      }\n      \n      retries++;\n      if (retries < MAX_RETRIES) {\n        Utilities.sleep(RETRY_DELAY_MS * retries);\n      }\n    }\n    \n    AppLogger.error(`Failed to acquire lock for property: ${key} after ${MAX_RETRIES} retries`);\n    return false;\n  }\n  \n  /**\n   * Get all properties with thread safety\n   */\n  export function getAllProperties(service: 'script' | 'user' = 'script'): {[key: string]: string} {\n    const lockKey = service === 'script' ? 'ALL_SCRIPT_PROPS' : 'ALL_USER_PROPS';\n    let retries = 0;\n    \n    while (retries < MAX_RETRIES) {\n      if (acquireLock(lockKey)) {\n        try {\n          const properties = service === 'script' \n            ? PropertiesService.getScriptProperties()\n            : PropertiesService.getUserProperties();\n          \n          return properties.getProperties();\n        } finally {\n          releaseLock(lockKey);\n        }\n      }\n      \n      retries++;\n      if (retries < MAX_RETRIES) {\n        Utilities.sleep(RETRY_DELAY_MS * retries);\n      }\n    }\n    \n    // Fallback: read without lock if all retries failed\n    AppLogger.warn('Failed to acquire lock for all properties, reading without lock');\n    const properties = service === 'script' \n      ? PropertiesService.getScriptProperties()\n      : PropertiesService.getUserProperties();\n    return properties.getProperties();\n  }\n  \n  /**\n   * Batch update properties with thread safety\n   */\n  export function setProperties(\n    updates: {[key: string]: string}, \n    service: 'script' | 'user' = 'script'\n  ): boolean {\n    const lockKey = service === 'script' ? 'BATCH_SCRIPT_PROPS' : 'BATCH_USER_PROPS';\n    let retries = 0;\n    \n    while (retries < MAX_RETRIES) {\n      if (acquireLock(lockKey, LOCK_TIMEOUT_MS * 2)) { // Double timeout for batch operations\n        try {\n          const properties = service === 'script' \n            ? PropertiesService.getScriptProperties()\n            : PropertiesService.getUserProperties();\n          \n          properties.setProperties(updates);\n          return true;\n        } catch (error) {\n          AppLogger.error('Failed to batch update properties', error);\n          return false;\n        } finally {\n          releaseLock(lockKey);\n        }\n      }\n      \n      retries++;\n      if (retries < MAX_RETRIES) {\n        Utilities.sleep(RETRY_DELAY_MS * retries);\n      }\n    }\n    \n    AppLogger.error(`Failed to acquire lock for batch update after ${MAX_RETRIES} retries`);\n    return false;\n  }\n  \n  /**\n   * Clean up expired locks (maintenance function)\n   */\n  export function cleanupExpiredLocks(): void {\n    try {\n      const properties = PropertiesService.getScriptProperties();\n      const allProps = properties.getProperties();\n      const now = new Date().getTime();\n      const keysToDelete: string[] = [];\n      \n      for (const key in allProps) {\n        if (key.startsWith(LOCK_PREFIX)) {\n          try {\n            const lockData = JSON.parse(allProps[key] || '{}');\n            if (lockData.expires < now) {\n              keysToDelete.push(key);\n            }\n          } catch {\n            // Invalid lock data, delete it\n            keysToDelete.push(key);\n          }\n        }\n      }\n      \n      keysToDelete.forEach(key => {\n        try {\n          properties.deleteProperty(key);\n        } catch (error) {\n          AppLogger.warn(`Failed to delete expired lock: ${key}`, error);\n        }\n      });\n      \n      if (keysToDelete.length > 0) {\n        AppLogger.info(`Cleaned up ${keysToDelete.length} expired locks`);\n      }\n    } catch (error) {\n      AppLogger.error('Failed to cleanup expired locks', error);\n    }\n  }\n}"]}