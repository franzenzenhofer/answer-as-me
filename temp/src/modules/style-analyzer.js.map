{"version":3,"file":"style-analyzer.js","sourceRoot":"","sources":["../../../src/modules/style-analyzer.ts"],"names":[],"mappings":"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","sourcesContent":["namespace StyleAnalyzer {\n  /**\n   * Analyze writing style from sent emails\n   */\n  export function analyzeEmails(sentEmails: GoogleAppsScript.Gmail.GmailMessage[]): Types.WritingStyle {\n    // Null safety check\n    if (!sentEmails || !Array.isArray(sentEmails) || sentEmails.length === 0) {\n      return getDefaultWritingStyle();\n    }\n    \n    const greetings: string[] = [];\n    const closings: string[] = [];\n    const sentences: string[] = [];\n    \n    // Process up to 200 emails\n    const emailsToProcess = sentEmails.slice(0, 200);\n    \n    emailsToProcess.forEach(email => {\n      if (!email) {\n        return;\n      }\n      \n      try {\n        const plainBody = email.getPlainBody();\n        if (!plainBody) {\n          return;\n        }\n        \n        const body = Utils.cleanEmailBody(plainBody);\n        \n        // Skip very short emails\n        if (!body || body.length < 50) {\n          return;\n        }\n      \n      \n        // Extract greeting\n        const greetingMatch = body.match(/^(Hi|Hello|Hey|Dear|Good\\s+\\w+)[,\\s]*/i);\n        if (greetingMatch && greetingMatch[1]) {\n          greetings.push(greetingMatch[1]);\n        }\n      \n        // Extract closing\n        const lines = body.split('\\n');\n        if (lines && lines.length > 0) {\n          for (let i = lines.length - 1; i >= Math.max(0, lines.length - 5); i--) {\n            const line = lines[i];\n            if (line) {\n              const trimmedLine = line.trim();\n              if (trimmedLine && trimmedLine.match(/(regards|best|sincerely|thanks|cheers)/i)) {\n                closings.push(trimmedLine);\n                break;\n              }\n            }\n          }\n        }\n      \n        // Extract sentences for pattern analysis\n        const sentenceMatches = body.match(/[^.!?]+[.!?]+/g);\n        if (sentenceMatches && sentenceMatches.length > 0) {\n          sentences.push(...sentenceMatches.slice(0, 5)); // First 5 sentences\n        }\n      } catch (error) {\n        AppLogger.warn('Failed to analyze email', error);\n      }\n    });\n    \n    // Build style profile\n    return {\n      greetings: getTopItems(greetings, 3),\n      closings: getTopItems(closings, 3),\n      sentencePatterns: extractPatterns(sentences),\n      vocabulary: [], // Could be enhanced with word frequency analysis\n      formalityLevel: detectFormality(sentences),\n      averageSentenceLength: sentences.length > 0 \n        ? Math.round(sentences.join(' ').length / sentences.length)\n        : 15,\n      emailLength: 'medium', // Default to medium\n      punctuationStyle: detectPunctuationStyle(sentences)\n    };\n  }\n  \n  /**\n   * Get most common items\n   */\n  function getTopItems(items: string[], count: number): string[] {\n    const frequency: { [key: string]: number } = {};\n    \n    items.forEach(item => {\n      frequency[item] = (frequency[item] || 0) + 1;\n    });\n    \n    return Object.entries(frequency)\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, count)\n      .map(entry => entry[0]);\n  }\n  \n  /**\n   * Extract sentence patterns\n   */\n  function extractPatterns(sentences: string[]): string[] {\n    if (!sentences || sentences.length === 0) {\n      return [];\n    }\n    \n    const patterns: string[] = [];\n    \n    // Look for common starters\n    const starters = sentences\n      .filter(s => s && typeof s === 'string')\n      .map(s => {\n        const words = s.trim().split(' ');\n        return words ? words.slice(0, 3).join(' ') : '';\n      })\n      .filter(s => s && s.length > 5);\n    \n    if (starters.length > 0) {\n      patterns.push(...getTopItems(starters, 5));\n    }\n    \n    return patterns;\n  }\n  \n  /**\n   * Detect formality level\n   */\n  function detectFormality(sentences: string[]): number {\n    if (!sentences || sentences.length === 0) {\n      return 3; // Default to neutral\n    }\n    \n    const text = sentences\n      .filter(s => s && typeof s === 'string')\n      .join(' ')\n      .toLowerCase();\n    \n    // Informal indicators\n    const informalCount = (\n      (text.match(/\\b(hey|hi|yeah|yep|nope|gonna|wanna|kinda)\\b/g) || []).length +\n      (text.match(/!+/g) || []).length +\n      (text.match(/\\.\\.\\./g) || []).length\n    );\n    \n    // Formal indicators\n    const formalCount = (\n      (text.match(/\\b(regards|sincerely|furthermore|therefore|however|nevertheless)\\b/g) || []).length +\n      (text.match(/\\b(would|could|should|shall|may)\\b/g) || []).length\n    );\n    \n    // Calculate formality score (1-5)\n    if (informalCount > formalCount * 2) {\n      return 2;\n    }\n    if (formalCount > informalCount * 2) {\n      return 4;\n    }\n    return 3;\n  }\n  \n  /**\n   * Detect punctuation style\n   */\n  function detectPunctuationStyle(sentences: string[]): string {\n    if (!sentences || sentences.length === 0) {\n      return 'standard';\n    }\n    \n    const text = sentences\n      .filter(s => s && typeof s === 'string')\n      .join(' ');\n    \n    const hasExclamations = (text.match(/!/g) || []).length > sentences.length * 0.1;\n    const hasEllipsis = (text.match(/\\.\\.\\./g) || []).length > 0;\n    const hasDashes = (text.match(/--|-/g) || []).length > sentences.length * 0.1;\n    \n    if (hasExclamations) {\n      return 'enthusiastic';\n    }\n    if (hasEllipsis) {\n      return 'casual';\n    }\n    if (hasDashes) {\n      return 'detailed';\n    }\n    return 'standard';\n  }\n  \n  /**\n   * Get default writing style when analysis fails\n   */\n  function getDefaultWritingStyle(): Types.WritingStyle {\n    return {\n      greetings: Constants.STYLE.DEFAULT_GREETINGS,\n      closings: Constants.STYLE.DEFAULT_CLOSINGS,\n      sentencePatterns: [],\n      vocabulary: [],\n      formalityLevel: Constants.STYLE.FORMALITY_NEUTRAL,\n      averageSentenceLength: Constants.STYLE.DEFAULT_AVG_SENTENCE_LENGTH,\n      emailLength: 'medium',\n      punctuationStyle: Constants.STYLE.DEFAULT_PUNCTUATION\n    };\n  }\n}"]}