{"version":3,"file":"style-improver.js","sourceRoot":"","sources":["../../../src/modules/style-improver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAU,aAAa,CAqNtB;AArND,WAAU,aAAa;IACrB;;;OAGG;IACH,SAAgB,sBAAsB,CACpC,YAAgC,EAChC,MAA0C;QAE1C,IAAI,CAAC;YACH,mCAAmC;YACnC,IAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;YACtC,IAAM,SAAO,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC,QAAQ,EAAE,CAAC;YAEnD,2BAA2B;YAC3B,IAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,GAAG;gBACpC,IAAM,IAAI,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC,WAAW,EAAE,CAAC;gBACzC,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAO,CAAC,WAAW,EAAE,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC;YAEH,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC5B,SAAS,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;gBAClD,OAAO,IAAI,CAAC;YACd,CAAC;YAED,mDAAmD;YACnD,IAAM,cAAc,GAAG,qBAAqB,CAAC,UAAU,CAAC,CAAC;YAEzD,4BAA4B;YAC5B,OAAO,WAAW,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;QACnD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IA7Be,oCAAsB,yBA6BrC,CAAA;IAED;;OAEG;IACH,SAAS,qBAAqB,CAAC,QAA+C;QAC5E,IAAM,SAAS,GAAa,EAAE,CAAC;QAC/B,IAAM,QAAQ,GAAa,EAAE,CAAC;QAC9B,IAAM,SAAS,GAAa,EAAE,CAAC;QAE/B,QAAQ,CAAC,OAAO,CAAC,UAAA,GAAG;YAClB,IAAM,IAAI,GAAG,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;YAEtD,mBAAmB;YACnB,IAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC9D,IAAI,aAAa,EAAE,CAAC;gBAClB,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;YACnC,CAAC;YAED,kBAAkB;YAClB,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC/B,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBACvE,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAE,CAAC,IAAI,EAAE,CAAC;gBAC9B,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;oBAC3C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACpB,MAAM;gBACR,CAAC;YACH,CAAC;YAED,oBAAoB;YACpB,IAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACrD,IAAI,eAAe,EAAE,CAAC;gBACpB,SAAS,CAAC,IAAI,OAAd,SAAS,2BAAS,eAAe,WAAE;YACrC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO;YACL,SAAS,EAAE,cAAc,CAAC,SAAS,CAAC;YACpC,QAAQ,EAAE,cAAc,CAAC,QAAQ,CAAC;YAClC,gBAAgB,EAAE,eAAe,CAAC,SAAS,CAAC;YAC5C,cAAc,EAAE,eAAe,CAAC,SAAS,CAAC;YAC1C,gBAAgB,EAAE,sBAAsB,CAAC,SAAS,CAAC;SACpD,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,SAAS,WAAW,CAClB,OAA2B,EAC3B,cAA2C;QAE3C,OAAO;YACL,gDAAgD;YAChD,SAAS,EAAE,kBAAkB,CAC3B,OAAO,CAAC,SAAS,EACjB,cAAc,CAAC,SAAS,IAAI,EAAE,EAC9B,SAAS,CAAC,KAAK,CAAC,aAAa,CAC9B;YAED,iBAAiB;YACjB,QAAQ,EAAE,kBAAkB,CAC1B,OAAO,CAAC,QAAQ,EAChB,cAAc,CAAC,QAAQ,IAAI,EAAE,EAC7B,SAAS,CAAC,KAAK,CAAC,YAAY,CAC7B;YAED,0BAA0B;YAC1B,gBAAgB,EAAE,kBAAkB,CAClC,OAAO,CAAC,gBAAgB,EACxB,cAAc,CAAC,gBAAgB,IAAI,EAAE,EACrC,SAAS,CAAC,KAAK,CAAC,YAAY,CAC7B;YAED,+CAA+C;YAC/C,UAAU,EAAE,OAAO,CAAC,UAAU;YAE9B,2BAA2B;YAC3B,cAAc,EAAE,cAAc,CAAC,cAAc,KAAK,SAAS;gBACzD,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;gBAC1E,CAAC,CAAC,OAAO,CAAC,cAAc;YAE1B,uCAAuC;YACvC,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;YAEpD,uCAAuC;YACvC,WAAW,EAAE,OAAO,CAAC,WAAW;YAEhC,wCAAwC;YACxC,gBAAgB,EAAE,cAAc,CAAC,gBAAgB,IAAI,OAAO,CAAC,gBAAgB;SAC9E,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,SAAS,kBAAkB,CAAC,OAAiB,EAAE,IAAc,EAAE,QAAgB;QAC7E,0BAA0B;QAC1B,IAAM,QAAQ,4BAAO,IAAI,GAAG,wCAAK,IAAI,kBAAK,OAAO,UAAE,SAAC,CAAC;QAErD,qDAAqD;QACrD,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,SAAS,cAAc,CAAC,KAAe;QACrC,gCAAW,IAAI,GAAG,CAAC,KAAK,CAAC,UAAE;IAC7B,CAAC;IAED;;OAEG;IACH,SAAS,eAAe,CAAC,SAAmB;QAC1C,IAAM,QAAQ,GAAG,SAAS;aACvB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAzC,CAAyC,CAAC;aACnD,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,CAAC,eAAe,EAA1C,CAA0C,CAAC,CAAC;QAE3D,yCAAyC;QACzC,IAAM,SAAS,GAA8B,EAAE,CAAC;QAChD,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;YACtB,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC;aAC7B,MAAM,CAAC,UAAC,EAAU;gBAAV,KAAA,aAAU,EAAT,CAAC,QAAA,EAAE,KAAK,QAAA;YAAM,OAAA,KAAK,IAAI,SAAS,CAAC,KAAK,CAAC,qBAAqB;QAA9C,CAA8C,CAAC;aACtE,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAX,CAAW,CAAC;aAC3B,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,KAAK,CAAC,YAAY,CAAC;aACtC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,CAAC,CAAC,EAAR,CAAQ,CAAC,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,SAAS,eAAe,CAAC,SAAmB;QAC1C,IAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAE/C,0BAA0B;QAC1B,IAAM,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,iBAAiB;aAClD,MAAM,CAAC,UAAA,SAAS,IAAI,OAAA,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAxB,CAAwB,CAAC;aAC7C,MAAM,CAAC;QAEV,0BAA0B;QAC1B,IAAM,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,iBAAiB;aAClD,MAAM,CAAC,UAAA,SAAS,IAAI,OAAA,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAxB,CAAwB,CAAC;aAC7C,MAAM,CAAC;QAEV,4BAA4B;QAC5B,IAAI,WAAW,GAAG,WAAW,GAAG,CAAC,EAAE,CAAC;YAClC,OAAO,SAAS,CAAC,KAAK,CAAC,gBAAgB,CAAC;QAC1C,CAAC;QACD,IAAI,WAAW,GAAG,WAAW,GAAG,CAAC,EAAE,CAAC;YAClC,OAAO,SAAS,CAAC,KAAK,CAAC,gBAAgB,CAAC;QAC1C,CAAC;QACD,OAAO,SAAS,CAAC,KAAK,CAAC,iBAAiB,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,SAAS,sBAAsB,CAAC,SAAmB;QACjD,IAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEjC,IAAM,gBAAgB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;QAC5E,IAAM,aAAa,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;QAC3D,IAAM,SAAS,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;QAErD,IAAI,gBAAgB,GAAG,GAAG,EAAE,CAAC;YAC3B,OAAO,cAAc,CAAC;QACxB,CAAC;QACD,IAAI,aAAa,GAAG,CAAC,EAAE,CAAC;YACtB,OAAO,QAAQ,CAAC;QAClB,CAAC;QACD,IAAI,SAAS,GAAG,SAAS,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;YACvC,OAAO,UAAU,CAAC;QACpB,CAAC;QACD,OAAO,SAAS,CAAC,KAAK,CAAC,mBAAmB,CAAC;IAC7C,CAAC;AACH,CAAC,EArNS,aAAa,KAAb,aAAa,QAqNtB","sourcesContent":["namespace StyleImprover {\n  /**\n   * Improve existing writing style based on a single email thread\n   * This allows incremental learning from specific conversations\n   */\n  export function improveStyleFromThread(\n    currentStyle: Types.WritingStyle,\n    thread: GoogleAppsScript.Gmail.GmailThread\n  ): Types.WritingStyle | null {\n    try {\n      // Extract all messages from thread\n      const messages = thread.getMessages();\n      const myEmail = Session.getActiveUser().getEmail();\n      \n      // Find messages sent by me\n      const myMessages = messages.filter(msg => {\n        const from = msg.getFrom().toLowerCase();\n        return from.includes(myEmail.toLowerCase());\n      });\n      \n      if (myMessages.length === 0) {\n        AppLogger.warn('No messages from user in thread');\n        return null;\n      }\n      \n      // Analyze patterns from my messages in this thread\n      const threadPatterns = analyzeThreadPatterns(myMessages);\n      \n      // Merge with existing style\n      return mergeStyles(currentStyle, threadPatterns);\n    } catch (error) {\n      AppLogger.error('Failed to improve style from thread', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Analyze patterns from messages in a thread\n   */\n  function analyzeThreadPatterns(messages: GoogleAppsScript.Gmail.GmailMessage[]): Partial<Types.WritingStyle> {\n    const greetings: string[] = [];\n    const closings: string[] = [];\n    const sentences: string[] = [];\n    \n    messages.forEach(msg => {\n      const body = Utils.cleanEmailBody(msg.getPlainBody());\n      \n      // Extract greeting\n      const greetingMatch = body.match(Constants.PATTERNS.GREETING);\n      if (greetingMatch) {\n        greetings.push(greetingMatch[0]);\n      }\n      \n      // Extract closing\n      const lines = body.split('\\n');\n      for (let i = lines.length - 1; i >= Math.max(0, lines.length - 5); i--) {\n        const line = lines[i]!.trim();\n        if (line.match(Constants.PATTERNS.CLOSING)) {\n          closings.push(line);\n          break;\n        }\n      }\n      \n      // Extract sentences\n      const sentenceMatches = body.match(/[^.!?]+[.!?]+/g);\n      if (sentenceMatches) {\n        sentences.push(...sentenceMatches);\n      }\n    });\n    \n    return {\n      greetings: getUniqueItems(greetings),\n      closings: getUniqueItems(closings),\n      sentencePatterns: extractPatterns(sentences),\n      formalityLevel: detectFormality(sentences),\n      punctuationStyle: detectPunctuationStyle(sentences)\n    };\n  }\n  \n  /**\n   * Merge current style with new patterns from thread\n   */\n  function mergeStyles(\n    current: Types.WritingStyle,\n    threadPatterns: Partial<Types.WritingStyle>\n  ): Types.WritingStyle {\n    return {\n      // Merge greetings, keeping most recent/relevant\n      greetings: mergeAndPrioritize(\n        current.greetings,\n        threadPatterns.greetings || [],\n        Constants.STYLE.MAX_GREETINGS\n      ),\n      \n      // Merge closings\n      closings: mergeAndPrioritize(\n        current.closings,\n        threadPatterns.closings || [],\n        Constants.STYLE.MAX_CLOSINGS\n      ),\n      \n      // Merge sentence patterns\n      sentencePatterns: mergeAndPrioritize(\n        current.sentencePatterns,\n        threadPatterns.sentencePatterns || [],\n        Constants.STYLE.MAX_PATTERNS\n      ),\n      \n      // Keep existing vocabulary (could be enhanced)\n      vocabulary: current.vocabulary,\n      \n      // Average formality levels\n      formalityLevel: threadPatterns.formalityLevel !== undefined\n        ? Math.round((current.formalityLevel + threadPatterns.formalityLevel) / 2)\n        : current.formalityLevel,\n      \n      // Keep current average sentence length\n      averageSentenceLength: current.averageSentenceLength,\n      \n      // Keep current email length preference\n      emailLength: current.emailLength,\n      \n      // Update punctuation style if different\n      punctuationStyle: threadPatterns.punctuationStyle || current.punctuationStyle\n    };\n  }\n  \n  /**\n   * Merge arrays and prioritize newer items\n   */\n  function mergeAndPrioritize(current: string[], new_: string[], maxItems: number): string[] {\n    // Combine and deduplicate\n    const combined = [...new Set([...new_, ...current])];\n    \n    // Return up to maxItems, prioritizing newer patterns\n    return combined.slice(0, maxItems);\n  }\n  \n  /**\n   * Get unique items from array\n   */\n  function getUniqueItems(items: string[]): string[] {\n    return [...new Set(items)];\n  }\n  \n  /**\n   * Extract sentence patterns (reuse from StyleAnalyzer)\n   */\n  function extractPatterns(sentences: string[]): string[] {\n    const starters = sentences\n      .map(s => s.trim().split(' ').slice(0, 3).join(' '))\n      .filter(s => s.length > Constants.STYLE.MIN_WORD_LENGTH);\n    \n    // Count frequency and return most common\n    const frequency: { [key: string]: number } = {};\n    starters.forEach(pattern => {\n      frequency[pattern] = (frequency[pattern] || 0) + 1;\n    });\n    \n    return Object.entries(frequency)\n      .filter(([_, count]) => count >= Constants.STYLE.MIN_PATTERN_FREQUENCY)\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, Constants.STYLE.MAX_PATTERNS)\n      .map(entry => entry[0]);\n  }\n  \n  /**\n   * Detect formality level from sentences\n   */\n  function detectFormality(sentences: string[]): number {\n    const text = sentences.join(' ').toLowerCase();\n    \n    // Count formal indicators\n    const formalCount = Constants.LISTS.FORMAL_INDICATORS\n      .filter(indicator => text.includes(indicator))\n      .length;\n    \n    // Count casual indicators\n    const casualCount = Constants.LISTS.CASUAL_INDICATORS\n      .filter(indicator => text.includes(indicator))\n      .length;\n    \n    // Calculate formality score\n    if (casualCount > formalCount * 2) {\n      return Constants.STYLE.FORMALITY_CASUAL;\n    }\n    if (formalCount > casualCount * 2) {\n      return Constants.STYLE.FORMALITY_FORMAL;\n    }\n    return Constants.STYLE.FORMALITY_NEUTRAL;\n  }\n  \n  /**\n   * Detect punctuation style\n   */\n  function detectPunctuationStyle(sentences: string[]): string {\n    const text = sentences.join(' ');\n    \n    const exclamationRatio = (text.match(/!/g) || []).length / sentences.length;\n    const ellipsisCount = (text.match(/\\.\\.\\./g) || []).length;\n    const dashCount = (text.match(/--|-/g) || []).length;\n    \n    if (exclamationRatio > 0.1) {\n      return 'enthusiastic';\n    }\n    if (ellipsisCount > 0) {\n      return 'casual';\n    }\n    if (dashCount > sentences.length * 0.1) {\n      return 'detailed';\n    }\n    return Constants.STYLE.DEFAULT_PUNCTUATION;\n  }\n}"]}