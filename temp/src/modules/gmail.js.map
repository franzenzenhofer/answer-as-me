{"version":3,"file":"gmail.js","sourceRoot":"","sources":["../../../src/modules/gmail.ts"],"names":[],"mappings":"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","sourcesContent":["namespace GmailService {\n  /**\n   * Get email context from a message\n   */\n  export function getEmailContext(message: GoogleAppsScript.Gmail.GmailMessage): Types.EmailContext {\n    const thread = message.getThread();\n    const messages = thread.getMessages();\n    const messageIndex = messages.findIndex(m => m.getId() === message.getId());\n    \n    // Get previous messages in thread\n    const previousMessages: Types.EmailMessage[] = [];\n    for (let i = Math.max(0, messageIndex - Config.MAX_CONTEXT_MESSAGES); i < messageIndex; i++) {\n      const msg = messages[i];\n      if (msg) {\n        previousMessages.push({\n          from: msg.getFrom(),\n          to: msg.getTo(),\n          date: msg.getDate(),\n          body: Utils.cleanEmailBody(msg.getPlainBody())\n        });\n      }\n    }\n    \n    return {\n      threadId: thread.getId(),\n      messageId: message.getId(),\n      from: message.getFrom(),\n      to: message.getTo(),\n      subject: message.getSubject(),\n      body: Utils.cleanEmailBody(message.getPlainBody()),\n      date: message.getDate(),\n      isReply: messageIndex > 0,\n      previousMessages\n    };\n  }\n  \n  /**\n   * Create a draft reply\n   */\n  export function createDraftReply(\n    message: GoogleAppsScript.Gmail.GmailMessage,\n    replyBody: string\n  ): GoogleAppsScript.Gmail.GmailDraft {\n    const thread = message.getThread();\n    const draft = thread.createDraftReply(replyBody);\n    \n    AppLogger.info('Draft created', { threadId: thread.getId() });\n    return draft;\n  }\n  \n  /**\n   * Send a reply\n   */\n  export function sendReply(\n    message: GoogleAppsScript.Gmail.GmailMessage,\n    replyBody: string\n  ): void {\n    const thread = message.getThread();\n    thread.reply(replyBody);\n    \n    AppLogger.info('Reply sent', { threadId: thread.getId() });\n  }\n  \n  /**\n   * Get current message from event\n   */\n  export function getCurrentMessage(\n    e: GoogleAppsScript.Addons.EventObject\n  ): GoogleAppsScript.Gmail.GmailMessage | null {\n    if (!e.gmail || !e.gmail.messageId) {\n      AppLogger.warn('No Gmail message in event');\n      return null;\n    }\n    \n    try {\n      const message = GmailApp.getMessageById(e.gmail.messageId);\n      return message;\n    } catch (error) {\n      AppLogger.error('Failed to get message', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Get draft by ID\n   */\n  export function getDraftById(draftId: string): GoogleAppsScript.Gmail.GmailDraft | null {\n    try {\n      const drafts = GmailApp.getDrafts();\n      return drafts.find(d => d.getId() === draftId) || null;\n    } catch (error) {\n      AppLogger.error('Failed to get draft', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Update draft content\n   */\n  export function updateDraft(\n    draftId: string,\n    newBody: string\n  ): boolean {\n    const draft = getDraftById(draftId);\n    if (!draft) {\n      AppLogger.error('Draft not found', { draftId });\n      return false;\n    }\n    \n    try {\n      const message = draft.getMessage();\n      draft.update(\n        message.getTo(),\n        message.getSubject(),\n        newBody\n      );\n      return true;\n    } catch (error) {\n      AppLogger.error('Failed to update draft', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Get inbox threads\n   */\n  export function getInboxThreads(\n    maxThreads: number = Constants.EMAIL.MAX_THREADS_TO_PROCESS\n  ): GoogleAppsScript.Gmail.GmailThread[] {\n    return GmailApp.getInboxThreads(0, maxThreads);\n  }\n  \n  /**\n   * Check if user can send emails\n   */\n  export function canSendEmail(): boolean {\n    try {\n      // Check remaining daily quota\n      const quota = MailApp.getRemainingDailyQuota();\n      return quota > Constants.VALIDATION.MIN_SENTENCE_COUNT;\n    } catch (error) {\n      AppLogger.error('Failed to check email quota', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Get recent sent emails for style analysis\n   */\n  export function getRecentSentEmails(limit: number): { body: string }[] {\n    try {\n      const threads = GmailApp.search(Constants.EMAIL.SEARCH_SENT, 0, limit);\n      const emails: { body: string }[] = [];\n      \n      for (const thread of threads) {\n        const messages = thread.getMessages();\n        for (const message of messages) {\n          // Only include messages sent by the user\n          if (message.getFrom().includes(Session.getActiveUser().getEmail())) {\n            emails.push({\n              body: message.getPlainBody()\n            });\n            if (emails.length >= limit) {\n              return emails;\n            }\n          }\n        }\n      }\n      \n      return emails;\n    } catch (error) {\n      AppLogger.error('Failed to get recent sent emails', error);\n      return [];\n    }\n  }\n}"]}